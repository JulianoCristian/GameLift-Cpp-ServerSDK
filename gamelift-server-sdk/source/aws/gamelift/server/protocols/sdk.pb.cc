// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aws/gamelift/server/protocols/sdk.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "aws/gamelift/server/protocols/sdk.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace amazon {
namespace whitewater {
namespace auxproxy {
namespace pbuffer {

namespace {

const ::google::protobuf::Descriptor* ProcessReady_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessReady_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProcessEnding_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessEnding_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameSessionActivate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameSessionActivate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameSessionTerminate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameSessionTerminate_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdatePlayerSessionCreationPolicy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdatePlayerSessionCreationPolicy_reflection_ = NULL;
const ::google::protobuf::Descriptor* AcceptPlayerSession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AcceptPlayerSession_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemovePlayerSession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemovePlayerSession_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportHealth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportHealth_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivateGameSession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivateGameSession_reflection_ = NULL;
const ::google::protobuf::Descriptor* TerminateProcess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TerminateProcess_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Response_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GameSession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameSession_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameProperty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameProperty_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerSession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerSession_reflection_ = NULL;
const ::google::protobuf::Descriptor* DescribePlayerSessionsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DescribePlayerSessionsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DescribePlayerSessionsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DescribePlayerSessionsResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto() {
  protobuf_AddDesc_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "aws/gamelift/server/protocols/sdk.proto");
  GOOGLE_CHECK(file != NULL);
  ProcessReady_descriptor_ = file->message_type(0);
  static const int ProcessReady_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessReady, logpathstoupload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessReady, port_),
  };
  ProcessReady_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProcessReady_descriptor_,
      ProcessReady::internal_default_instance(),
      ProcessReady_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessReady, _has_bits_),
      -1,
      -1,
      sizeof(ProcessReady),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessReady, _internal_metadata_));
  ProcessEnding_descriptor_ = file->message_type(1);
  static const int ProcessEnding_offsets_[1] = {
  };
  ProcessEnding_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProcessEnding_descriptor_,
      ProcessEnding::internal_default_instance(),
      ProcessEnding_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessEnding, _has_bits_),
      -1,
      -1,
      sizeof(ProcessEnding),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessEnding, _internal_metadata_));
  GameSessionActivate_descriptor_ = file->message_type(2);
  static const int GameSessionActivate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSessionActivate, gamesessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSessionActivate, maxplayers_),
  };
  GameSessionActivate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameSessionActivate_descriptor_,
      GameSessionActivate::internal_default_instance(),
      GameSessionActivate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSessionActivate, _has_bits_),
      -1,
      -1,
      sizeof(GameSessionActivate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSessionActivate, _internal_metadata_));
  GameSessionTerminate_descriptor_ = file->message_type(3);
  static const int GameSessionTerminate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSessionTerminate, gamesessionid_),
  };
  GameSessionTerminate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameSessionTerminate_descriptor_,
      GameSessionTerminate::internal_default_instance(),
      GameSessionTerminate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSessionTerminate, _has_bits_),
      -1,
      -1,
      sizeof(GameSessionTerminate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSessionTerminate, _internal_metadata_));
  UpdatePlayerSessionCreationPolicy_descriptor_ = file->message_type(4);
  static const int UpdatePlayerSessionCreationPolicy_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePlayerSessionCreationPolicy, gamesessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePlayerSessionCreationPolicy, newplayersessioncreationpolicy_),
  };
  UpdatePlayerSessionCreationPolicy_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UpdatePlayerSessionCreationPolicy_descriptor_,
      UpdatePlayerSessionCreationPolicy::internal_default_instance(),
      UpdatePlayerSessionCreationPolicy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePlayerSessionCreationPolicy, _has_bits_),
      -1,
      -1,
      sizeof(UpdatePlayerSessionCreationPolicy),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePlayerSessionCreationPolicy, _internal_metadata_));
  AcceptPlayerSession_descriptor_ = file->message_type(5);
  static const int AcceptPlayerSession_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptPlayerSession, gamesessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptPlayerSession, playersessionid_),
  };
  AcceptPlayerSession_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AcceptPlayerSession_descriptor_,
      AcceptPlayerSession::internal_default_instance(),
      AcceptPlayerSession_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptPlayerSession, _has_bits_),
      -1,
      -1,
      sizeof(AcceptPlayerSession),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptPlayerSession, _internal_metadata_));
  RemovePlayerSession_descriptor_ = file->message_type(6);
  static const int RemovePlayerSession_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemovePlayerSession, gamesessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemovePlayerSession, playersessionid_),
  };
  RemovePlayerSession_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RemovePlayerSession_descriptor_,
      RemovePlayerSession::internal_default_instance(),
      RemovePlayerSession_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemovePlayerSession, _has_bits_),
      -1,
      -1,
      sizeof(RemovePlayerSession),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemovePlayerSession, _internal_metadata_));
  ReportHealth_descriptor_ = file->message_type(7);
  static const int ReportHealth_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportHealth, healthstatus_),
  };
  ReportHealth_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReportHealth_descriptor_,
      ReportHealth::internal_default_instance(),
      ReportHealth_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportHealth, _has_bits_),
      -1,
      -1,
      sizeof(ReportHealth),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportHealth, _internal_metadata_));
  ActivateGameSession_descriptor_ = file->message_type(8);
  static const int ActivateGameSession_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivateGameSession, gamesession_),
  };
  ActivateGameSession_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActivateGameSession_descriptor_,
      ActivateGameSession::internal_default_instance(),
      ActivateGameSession_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivateGameSession, _has_bits_),
      -1,
      -1,
      sizeof(ActivateGameSession),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivateGameSession, _internal_metadata_));
  TerminateProcess_descriptor_ = file->message_type(9);
  static const int TerminateProcess_offsets_[1] = {
  };
  TerminateProcess_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TerminateProcess_descriptor_,
      TerminateProcess::internal_default_instance(),
      TerminateProcess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminateProcess, _has_bits_),
      -1,
      -1,
      sizeof(TerminateProcess),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminateProcess, _internal_metadata_));
  Response_descriptor_ = file->message_type(10);
  static const int Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, errormessage_),
  };
  Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_descriptor_,
      Response::internal_default_instance(),
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_),
      -1,
      -1,
      sizeof(Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_));
  Response_Status_descriptor_ = Response_descriptor_->enum_type(0);
  GameSession_descriptor_ = file->message_type(11);
  static const int GameSession_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSession, gamesessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSession, fleetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSession, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSession, maxplayers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSession, joinable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSession, gameproperties_),
  };
  GameSession_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameSession_descriptor_,
      GameSession::internal_default_instance(),
      GameSession_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSession, _has_bits_),
      -1,
      -1,
      sizeof(GameSession),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSession, _internal_metadata_));
  GameProperty_descriptor_ = file->message_type(12);
  static const int GameProperty_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameProperty, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameProperty, value_),
  };
  GameProperty_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameProperty_descriptor_,
      GameProperty::internal_default_instance(),
      GameProperty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameProperty, _has_bits_),
      -1,
      -1,
      sizeof(GameProperty),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameProperty, _internal_metadata_));
  PlayerSession_descriptor_ = file->message_type(13);
  static const int PlayerSession_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSession, playersessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSession, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSession, gamesessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSession, fleetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSession, ipaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSession, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSession, creationtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSession, terminationtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSession, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSession, playerdata_),
  };
  PlayerSession_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerSession_descriptor_,
      PlayerSession::internal_default_instance(),
      PlayerSession_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSession, _has_bits_),
      -1,
      -1,
      sizeof(PlayerSession),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSession, _internal_metadata_));
  DescribePlayerSessionsRequest_descriptor_ = file->message_type(14);
  static const int DescribePlayerSessionsRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescribePlayerSessionsRequest, gamesessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescribePlayerSessionsRequest, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescribePlayerSessionsRequest, playersessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescribePlayerSessionsRequest, playersessionstatusfilter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescribePlayerSessionsRequest, nexttoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescribePlayerSessionsRequest, limit_),
  };
  DescribePlayerSessionsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DescribePlayerSessionsRequest_descriptor_,
      DescribePlayerSessionsRequest::internal_default_instance(),
      DescribePlayerSessionsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescribePlayerSessionsRequest, _has_bits_),
      -1,
      -1,
      sizeof(DescribePlayerSessionsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescribePlayerSessionsRequest, _internal_metadata_));
  DescribePlayerSessionsResponse_descriptor_ = file->message_type(15);
  static const int DescribePlayerSessionsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescribePlayerSessionsResponse, nexttoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescribePlayerSessionsResponse, playersessions_),
  };
  DescribePlayerSessionsResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DescribePlayerSessionsResponse_descriptor_,
      DescribePlayerSessionsResponse::internal_default_instance(),
      DescribePlayerSessionsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescribePlayerSessionsResponse, _has_bits_),
      -1,
      -1,
      sizeof(DescribePlayerSessionsResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescribePlayerSessionsResponse, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProcessReady_descriptor_, ProcessReady::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProcessEnding_descriptor_, ProcessEnding::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameSessionActivate_descriptor_, GameSessionActivate::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameSessionTerminate_descriptor_, GameSessionTerminate::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UpdatePlayerSessionCreationPolicy_descriptor_, UpdatePlayerSessionCreationPolicy::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AcceptPlayerSession_descriptor_, AcceptPlayerSession::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RemovePlayerSession_descriptor_, RemovePlayerSession::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReportHealth_descriptor_, ReportHealth::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActivateGameSession_descriptor_, ActivateGameSession::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TerminateProcess_descriptor_, TerminateProcess::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_descriptor_, Response::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameSession_descriptor_, GameSession::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameProperty_descriptor_, GameProperty::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerSession_descriptor_, PlayerSession::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DescribePlayerSessionsRequest_descriptor_, DescribePlayerSessionsRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DescribePlayerSessionsResponse_descriptor_, DescribePlayerSessionsResponse::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto() {
  ProcessReady_default_instance_.Shutdown();
  delete ProcessReady_reflection_;
  ProcessEnding_default_instance_.Shutdown();
  delete ProcessEnding_reflection_;
  GameSessionActivate_default_instance_.Shutdown();
  delete GameSessionActivate_reflection_;
  GameSessionTerminate_default_instance_.Shutdown();
  delete GameSessionTerminate_reflection_;
  UpdatePlayerSessionCreationPolicy_default_instance_.Shutdown();
  delete UpdatePlayerSessionCreationPolicy_reflection_;
  AcceptPlayerSession_default_instance_.Shutdown();
  delete AcceptPlayerSession_reflection_;
  RemovePlayerSession_default_instance_.Shutdown();
  delete RemovePlayerSession_reflection_;
  ReportHealth_default_instance_.Shutdown();
  delete ReportHealth_reflection_;
  ActivateGameSession_default_instance_.Shutdown();
  delete ActivateGameSession_reflection_;
  TerminateProcess_default_instance_.Shutdown();
  delete TerminateProcess_reflection_;
  Response_default_instance_.Shutdown();
  delete Response_reflection_;
  GameSession_default_instance_.Shutdown();
  delete GameSession_reflection_;
  GameProperty_default_instance_.Shutdown();
  delete GameProperty_reflection_;
  PlayerSession_default_instance_.Shutdown();
  delete PlayerSession_reflection_;
  DescribePlayerSessionsRequest_default_instance_.Shutdown();
  delete DescribePlayerSessionsRequest_reflection_;
  DescribePlayerSessionsResponse_default_instance_.Shutdown();
  delete DescribePlayerSessionsResponse_reflection_;
}

void protobuf_InitDefaults_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  ProcessReady_default_instance_.DefaultConstruct();
  ProcessEnding_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  GameSessionActivate_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  GameSessionTerminate_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  UpdatePlayerSessionCreationPolicy_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  AcceptPlayerSession_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  RemovePlayerSession_default_instance_.DefaultConstruct();
  ReportHealth_default_instance_.DefaultConstruct();
  ActivateGameSession_default_instance_.DefaultConstruct();
  TerminateProcess_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Response_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  GameSession_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  GameProperty_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  PlayerSession_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  DescribePlayerSessionsRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  DescribePlayerSessionsResponse_default_instance_.DefaultConstruct();
  ProcessReady_default_instance_.get_mutable()->InitAsDefaultInstance();
  ProcessEnding_default_instance_.get_mutable()->InitAsDefaultInstance();
  GameSessionActivate_default_instance_.get_mutable()->InitAsDefaultInstance();
  GameSessionTerminate_default_instance_.get_mutable()->InitAsDefaultInstance();
  UpdatePlayerSessionCreationPolicy_default_instance_.get_mutable()->InitAsDefaultInstance();
  AcceptPlayerSession_default_instance_.get_mutable()->InitAsDefaultInstance();
  RemovePlayerSession_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReportHealth_default_instance_.get_mutable()->InitAsDefaultInstance();
  ActivateGameSession_default_instance_.get_mutable()->InitAsDefaultInstance();
  TerminateProcess_default_instance_.get_mutable()->InitAsDefaultInstance();
  Response_default_instance_.get_mutable()->InitAsDefaultInstance();
  GameSession_default_instance_.get_mutable()->InitAsDefaultInstance();
  GameProperty_default_instance_.get_mutable()->InitAsDefaultInstance();
  PlayerSession_default_instance_.get_mutable()->InitAsDefaultInstance();
  DescribePlayerSessionsRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  DescribePlayerSessionsResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto_once_);
void protobuf_InitDefaults_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto_once_,
                 &protobuf_InitDefaults_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto_impl);
}
void protobuf_AddDesc_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\'aws/gamelift/server/protocols/sdk.prot"
    "o\022&com.amazon.whitewater.auxproxy.pbuffe"
    "r\"6\n\014ProcessReady\022\030\n\020logPathsToUpload\030\001 "
    "\003(\t\022\014\n\004port\030\002 \001(\005\"\017\n\rProcessEnding\"@\n\023Ga"
    "meSessionActivate\022\025\n\rgameSessionId\030\001 \001(\t"
    "\022\022\n\nmaxPlayers\030\002 \001(\005\"-\n\024GameSessionTermi"
    "nate\022\025\n\rgameSessionId\030\001 \001(\t\"b\n!UpdatePla"
    "yerSessionCreationPolicy\022\025\n\rgameSessionI"
    "d\030\001 \001(\t\022&\n\036newPlayerSessionCreationPolic"
    "y\030\002 \001(\t\"E\n\023AcceptPlayerSession\022\025\n\rgameSe"
    "ssionId\030\001 \001(\t\022\027\n\017playerSessionId\030\002 \001(\t\"E"
    "\n\023RemovePlayerSession\022\025\n\rgameSessionId\030\001"
    " \001(\t\022\027\n\017playerSessionId\030\002 \001(\t\"$\n\014ReportH"
    "ealth\022\024\n\014healthStatus\030\001 \001(\010\"_\n\023ActivateG"
    "ameSession\022H\n\013gameSession\030\001 \001(\01323.com.am"
    "azon.whitewater.auxproxy.pbuffer.GameSes"
    "sion\"\022\n\020TerminateProcess\"\206\001\n\010Response\022G\n"
    "\006status\030\001 \001(\01627.com.amazon.whitewater.au"
    "xproxy.pbuffer.Response.Status\022\024\n\014errorM"
    "essage\030\002 \001(\t\"\033\n\006Status\022\006\n\002OK\020\000\022\t\n\005ERROR\020"
    "\001\"\267\001\n\013GameSession\022\025\n\rgameSessionId\030\001 \001(\t"
    "\022\017\n\007fleetId\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\022\n\nmaxPl"
    "ayers\030\004 \001(\005\022\020\n\010joinable\030\005 \001(\010\022L\n\016gamePro"
    "perties\030\006 \003(\01324.com.amazon.whitewater.au"
    "xproxy.pbuffer.GameProperty\"*\n\014GamePrope"
    "rty\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"\326\001\n\rPlay"
    "erSession\022\027\n\017playerSessionId\030\001 \001(\t\022\020\n\010pl"
    "ayerId\030\002 \001(\t\022\025\n\rgameSessionId\030\003 \001(\t\022\017\n\007f"
    "leetId\030\004 \001(\t\022\021\n\tipAddress\030\005 \001(\t\022\016\n\006statu"
    "s\030\006 \001(\t\022\024\n\014creationTime\030\007 \001(\003\022\027\n\017termina"
    "tionTime\030\010 \001(\003\022\014\n\004port\030\t \001(\005\022\022\n\nplayerDa"
    "ta\030\n \001(\t\"\246\001\n\035DescribePlayerSessionsReque"
    "st\022\025\n\rgameSessionId\030\001 \001(\t\022\020\n\010playerId\030\002 "
    "\001(\t\022\027\n\017playerSessionId\030\003 \001(\t\022!\n\031playerSe"
    "ssionStatusFilter\030\004 \001(\t\022\021\n\tnextToken\030\005 \001"
    "(\t\022\r\n\005limit\030\006 \001(\005\"\202\001\n\036DescribePlayerSess"
    "ionsResponse\022\021\n\tnextToken\030\001 \001(\t\022M\n\016playe"
    "rSessions\030\002 \003(\01325.com.amazon.whitewater."
    "auxproxy.pbuffer.PlayerSession", 1550);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "aws/gamelift/server/protocols/sdk.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto_once_);
void protobuf_AddDesc_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto_once_,
                 &protobuf_AddDesc_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto {
  StaticDescriptorInitializer_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto() {
    protobuf_AddDesc_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto();
  }
} static_descriptor_initializer_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProcessReady::kLogPathsToUploadFieldNumber;
const int ProcessReady::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProcessReady::ProcessReady()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
}

void ProcessReady::InitAsDefaultInstance() {
}

ProcessReady::ProcessReady(const ProcessReady& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
}

void ProcessReady::SharedCtor() {
  _cached_size_ = 0;
  port_ = 0;
}

ProcessReady::~ProcessReady() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  SharedDtor();
}

void ProcessReady::SharedDtor() {
}

void ProcessReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessReady::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessReady_descriptor_;
}

const ProcessReady& ProcessReady::default_instance() {
  protobuf_InitDefaults_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ProcessReady> ProcessReady_default_instance_;

ProcessReady* ProcessReady::New(::google::protobuf::Arena* arena) const {
  ProcessReady* n = new ProcessReady;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProcessReady::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  port_ = 0;
  logpathstoupload_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ProcessReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string logPathsToUpload = 1;
      case 1: {
        if (tag == 10) {
         parse_logPathsToUpload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_logpathstoupload()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logpathstoupload(this->logpathstoupload_size() - 1).data(),
            this->logpathstoupload(this->logpathstoupload_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_logPathsToUpload;
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional int32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  return false;
#undef DO_
}

void ProcessReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  // repeated string logPathsToUpload = 1;
  for (int i = 0; i < this->logpathstoupload_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logpathstoupload(i).data(), this->logpathstoupload(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->logpathstoupload(i), output);
  }

  // optional int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
}

::google::protobuf::uint8* ProcessReady::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  // repeated string logPathsToUpload = 1;
  for (int i = 0; i < this->logpathstoupload_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logpathstoupload(i).data(), this->logpathstoupload(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->logpathstoupload(i), target);
  }

  // optional int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  return target;
}

size_t ProcessReady::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  size_t total_size = 0;

  // optional int32 port = 2;
  if (has_port()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  // repeated string logPathsToUpload = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->logpathstoupload_size());
  for (int i = 0; i < this->logpathstoupload_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->logpathstoupload(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessReady::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ProcessReady* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProcessReady>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
    UnsafeMergeFrom(*source);
  }
}

void ProcessReady::MergeFrom(const ProcessReady& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ProcessReady::UnsafeMergeFrom(const ProcessReady& from) {
  GOOGLE_DCHECK(&from != this);
  logpathstoupload_.UnsafeMergeFrom(from.logpathstoupload_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ProcessReady::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessReady::CopyFrom(const ProcessReady& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ProcessReady::IsInitialized() const {

  return true;
}

void ProcessReady::Swap(ProcessReady* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProcessReady::InternalSwap(ProcessReady* other) {
  logpathstoupload_.UnsafeArenaSwap(&other->logpathstoupload_);
  std::swap(port_, other->port_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProcessReady::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessReady_descriptor_;
  metadata.reflection = ProcessReady_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProcessReady

// repeated string logPathsToUpload = 1;
int ProcessReady::logpathstoupload_size() const {
  return logpathstoupload_.size();
}
void ProcessReady::clear_logpathstoupload() {
  logpathstoupload_.Clear();
}
const ::std::string& ProcessReady::logpathstoupload(int index) const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload)
  return logpathstoupload_.Get(index);
}
::std::string* ProcessReady::mutable_logpathstoupload(int index) {
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload)
  return logpathstoupload_.Mutable(index);
}
void ProcessReady::set_logpathstoupload(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload)
  logpathstoupload_.Mutable(index)->assign(value);
}
void ProcessReady::set_logpathstoupload(int index, const char* value) {
  logpathstoupload_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload)
}
void ProcessReady::set_logpathstoupload(int index, const char* value, size_t size) {
  logpathstoupload_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload)
}
::std::string* ProcessReady::add_logpathstoupload() {
  // @@protoc_insertion_point(field_add_mutable:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload)
  return logpathstoupload_.Add();
}
void ProcessReady::add_logpathstoupload(const ::std::string& value) {
  logpathstoupload_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload)
}
void ProcessReady::add_logpathstoupload(const char* value) {
  logpathstoupload_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload)
}
void ProcessReady::add_logpathstoupload(const char* value, size_t size) {
  logpathstoupload_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProcessReady::logpathstoupload() const {
  // @@protoc_insertion_point(field_list:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload)
  return logpathstoupload_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ProcessReady::mutable_logpathstoupload() {
  // @@protoc_insertion_point(field_mutable_list:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload)
  return &logpathstoupload_;
}

// optional int32 port = 2;
bool ProcessReady::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ProcessReady::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
void ProcessReady::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
void ProcessReady::clear_port() {
  port_ = 0;
  clear_has_port();
}
::google::protobuf::int32 ProcessReady::port() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.port)
  return port_;
}
void ProcessReady::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.port)
}

inline const ProcessReady* ProcessReady::internal_default_instance() {
  return &ProcessReady_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProcessEnding::ProcessEnding()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
}

void ProcessEnding::InitAsDefaultInstance() {
}

ProcessEnding::ProcessEnding(const ProcessEnding& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
}

void ProcessEnding::SharedCtor() {
  _cached_size_ = 0;
}

ProcessEnding::~ProcessEnding() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  SharedDtor();
}

void ProcessEnding::SharedDtor() {
}

void ProcessEnding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessEnding::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessEnding_descriptor_;
}

const ProcessEnding& ProcessEnding::default_instance() {
  protobuf_InitDefaults_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ProcessEnding> ProcessEnding_default_instance_;

ProcessEnding* ProcessEnding::New(::google::protobuf::Arena* arena) const {
  ProcessEnding* n = new ProcessEnding;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProcessEnding::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ProcessEnding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  return false;
#undef DO_
}

void ProcessEnding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
}

::google::protobuf::uint8* ProcessEnding::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  return target;
}

size_t ProcessEnding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessEnding::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ProcessEnding* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProcessEnding>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
    UnsafeMergeFrom(*source);
  }
}

void ProcessEnding::MergeFrom(const ProcessEnding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ProcessEnding::UnsafeMergeFrom(const ProcessEnding& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ProcessEnding::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessEnding::CopyFrom(const ProcessEnding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ProcessEnding::IsInitialized() const {

  return true;
}

void ProcessEnding::Swap(ProcessEnding* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProcessEnding::InternalSwap(ProcessEnding* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProcessEnding::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessEnding_descriptor_;
  metadata.reflection = ProcessEnding_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProcessEnding

inline const ProcessEnding* ProcessEnding::internal_default_instance() {
  return &ProcessEnding_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameSessionActivate::kGameSessionIdFieldNumber;
const int GameSessionActivate::kMaxPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameSessionActivate::GameSessionActivate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
}

void GameSessionActivate::InitAsDefaultInstance() {
}

GameSessionActivate::GameSessionActivate(const GameSessionActivate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
}

void GameSessionActivate::SharedCtor() {
  _cached_size_ = 0;
  gamesessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  maxplayers_ = 0;
}

GameSessionActivate::~GameSessionActivate() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  SharedDtor();
}

void GameSessionActivate::SharedDtor() {
  gamesessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameSessionActivate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameSessionActivate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameSessionActivate_descriptor_;
}

const GameSessionActivate& GameSessionActivate::default_instance() {
  protobuf_InitDefaults_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GameSessionActivate> GameSessionActivate_default_instance_;

GameSessionActivate* GameSessionActivate::New(::google::protobuf::Arena* arena) const {
  GameSessionActivate* n = new GameSessionActivate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameSessionActivate::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_gamesessionid()) {
      gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    maxplayers_ = 0;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GameSessionActivate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gameSessionId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamesessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gamesessionid().data(), this->gamesessionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.gameSessionId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_maxPlayers;
        break;
      }

      // optional int32 maxPlayers = 2;
      case 2: {
        if (tag == 16) {
         parse_maxPlayers:
          set_has_maxplayers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxplayers_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  return false;
#undef DO_
}

void GameSessionActivate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  // optional string gameSessionId = 1;
  if (has_gamesessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamesessionid().data(), this->gamesessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.gameSessionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gamesessionid(), output);
  }

  // optional int32 maxPlayers = 2;
  if (has_maxplayers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maxplayers(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
}

::google::protobuf::uint8* GameSessionActivate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  // optional string gameSessionId = 1;
  if (has_gamesessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamesessionid().data(), this->gamesessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.gameSessionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gamesessionid(), target);
  }

  // optional int32 maxPlayers = 2;
  if (has_maxplayers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maxplayers(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  return target;
}

size_t GameSessionActivate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string gameSessionId = 1;
    if (has_gamesessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gamesessionid());
    }

    // optional int32 maxPlayers = 2;
    if (has_maxplayers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxplayers());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameSessionActivate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GameSessionActivate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameSessionActivate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
    UnsafeMergeFrom(*source);
  }
}

void GameSessionActivate::MergeFrom(const GameSessionActivate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GameSessionActivate::UnsafeMergeFrom(const GameSessionActivate& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamesessionid()) {
      set_has_gamesessionid();
      gamesessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionid_);
    }
    if (from.has_maxplayers()) {
      set_maxplayers(from.maxplayers());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void GameSessionActivate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameSessionActivate::CopyFrom(const GameSessionActivate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GameSessionActivate::IsInitialized() const {

  return true;
}

void GameSessionActivate::Swap(GameSessionActivate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameSessionActivate::InternalSwap(GameSessionActivate* other) {
  gamesessionid_.Swap(&other->gamesessionid_);
  std::swap(maxplayers_, other->maxplayers_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameSessionActivate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameSessionActivate_descriptor_;
  metadata.reflection = GameSessionActivate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameSessionActivate

// optional string gameSessionId = 1;
bool GameSessionActivate::has_gamesessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameSessionActivate::set_has_gamesessionid() {
  _has_bits_[0] |= 0x00000001u;
}
void GameSessionActivate::clear_has_gamesessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameSessionActivate::clear_gamesessionid() {
  gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gamesessionid();
}
const ::std::string& GameSessionActivate::gamesessionid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.gameSessionId)
  return gamesessionid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameSessionActivate::set_gamesessionid(const ::std::string& value) {
  set_has_gamesessionid();
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.gameSessionId)
}
void GameSessionActivate::set_gamesessionid(const char* value) {
  set_has_gamesessionid();
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.gameSessionId)
}
void GameSessionActivate::set_gamesessionid(const char* value, size_t size) {
  set_has_gamesessionid();
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.gameSessionId)
}
::std::string* GameSessionActivate::mutable_gamesessionid() {
  set_has_gamesessionid();
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.gameSessionId)
  return gamesessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameSessionActivate::release_gamesessionid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.gameSessionId)
  clear_has_gamesessionid();
  return gamesessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameSessionActivate::set_allocated_gamesessionid(::std::string* gamesessionid) {
  if (gamesessionid != NULL) {
    set_has_gamesessionid();
  } else {
    clear_has_gamesessionid();
  }
  gamesessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamesessionid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.gameSessionId)
}

// optional int32 maxPlayers = 2;
bool GameSessionActivate::has_maxplayers() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameSessionActivate::set_has_maxplayers() {
  _has_bits_[0] |= 0x00000002u;
}
void GameSessionActivate::clear_has_maxplayers() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameSessionActivate::clear_maxplayers() {
  maxplayers_ = 0;
  clear_has_maxplayers();
}
::google::protobuf::int32 GameSessionActivate::maxplayers() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.maxPlayers)
  return maxplayers_;
}
void GameSessionActivate::set_maxplayers(::google::protobuf::int32 value) {
  set_has_maxplayers();
  maxplayers_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.maxPlayers)
}

inline const GameSessionActivate* GameSessionActivate::internal_default_instance() {
  return &GameSessionActivate_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameSessionTerminate::kGameSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameSessionTerminate::GameSessionTerminate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
}

void GameSessionTerminate::InitAsDefaultInstance() {
}

GameSessionTerminate::GameSessionTerminate(const GameSessionTerminate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
}

void GameSessionTerminate::SharedCtor() {
  _cached_size_ = 0;
  gamesessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GameSessionTerminate::~GameSessionTerminate() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  SharedDtor();
}

void GameSessionTerminate::SharedDtor() {
  gamesessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameSessionTerminate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameSessionTerminate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameSessionTerminate_descriptor_;
}

const GameSessionTerminate& GameSessionTerminate::default_instance() {
  protobuf_InitDefaults_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GameSessionTerminate> GameSessionTerminate_default_instance_;

GameSessionTerminate* GameSessionTerminate::New(::google::protobuf::Arena* arena) const {
  GameSessionTerminate* n = new GameSessionTerminate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameSessionTerminate::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  if (has_gamesessionid()) {
    gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GameSessionTerminate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gameSessionId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamesessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gamesessionid().data(), this->gamesessionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate.gameSessionId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  return false;
#undef DO_
}

void GameSessionTerminate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  // optional string gameSessionId = 1;
  if (has_gamesessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamesessionid().data(), this->gamesessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate.gameSessionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gamesessionid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
}

::google::protobuf::uint8* GameSessionTerminate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  // optional string gameSessionId = 1;
  if (has_gamesessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamesessionid().data(), this->gamesessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate.gameSessionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gamesessionid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  return target;
}

size_t GameSessionTerminate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  size_t total_size = 0;

  // optional string gameSessionId = 1;
  if (has_gamesessionid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gamesessionid());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameSessionTerminate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GameSessionTerminate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameSessionTerminate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
    UnsafeMergeFrom(*source);
  }
}

void GameSessionTerminate::MergeFrom(const GameSessionTerminate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GameSessionTerminate::UnsafeMergeFrom(const GameSessionTerminate& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamesessionid()) {
      set_has_gamesessionid();
      gamesessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionid_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void GameSessionTerminate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameSessionTerminate::CopyFrom(const GameSessionTerminate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GameSessionTerminate::IsInitialized() const {

  return true;
}

void GameSessionTerminate::Swap(GameSessionTerminate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameSessionTerminate::InternalSwap(GameSessionTerminate* other) {
  gamesessionid_.Swap(&other->gamesessionid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameSessionTerminate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameSessionTerminate_descriptor_;
  metadata.reflection = GameSessionTerminate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameSessionTerminate

// optional string gameSessionId = 1;
bool GameSessionTerminate::has_gamesessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameSessionTerminate::set_has_gamesessionid() {
  _has_bits_[0] |= 0x00000001u;
}
void GameSessionTerminate::clear_has_gamesessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameSessionTerminate::clear_gamesessionid() {
  gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gamesessionid();
}
const ::std::string& GameSessionTerminate::gamesessionid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate.gameSessionId)
  return gamesessionid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameSessionTerminate::set_gamesessionid(const ::std::string& value) {
  set_has_gamesessionid();
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate.gameSessionId)
}
void GameSessionTerminate::set_gamesessionid(const char* value) {
  set_has_gamesessionid();
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate.gameSessionId)
}
void GameSessionTerminate::set_gamesessionid(const char* value, size_t size) {
  set_has_gamesessionid();
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate.gameSessionId)
}
::std::string* GameSessionTerminate::mutable_gamesessionid() {
  set_has_gamesessionid();
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate.gameSessionId)
  return gamesessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameSessionTerminate::release_gamesessionid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate.gameSessionId)
  clear_has_gamesessionid();
  return gamesessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameSessionTerminate::set_allocated_gamesessionid(::std::string* gamesessionid) {
  if (gamesessionid != NULL) {
    set_has_gamesessionid();
  } else {
    clear_has_gamesessionid();
  }
  gamesessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamesessionid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate.gameSessionId)
}

inline const GameSessionTerminate* GameSessionTerminate::internal_default_instance() {
  return &GameSessionTerminate_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdatePlayerSessionCreationPolicy::kGameSessionIdFieldNumber;
const int UpdatePlayerSessionCreationPolicy::kNewPlayerSessionCreationPolicyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdatePlayerSessionCreationPolicy::UpdatePlayerSessionCreationPolicy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
}

void UpdatePlayerSessionCreationPolicy::InitAsDefaultInstance() {
}

UpdatePlayerSessionCreationPolicy::UpdatePlayerSessionCreationPolicy(const UpdatePlayerSessionCreationPolicy& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
}

void UpdatePlayerSessionCreationPolicy::SharedCtor() {
  _cached_size_ = 0;
  gamesessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newplayersessioncreationpolicy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UpdatePlayerSessionCreationPolicy::~UpdatePlayerSessionCreationPolicy() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  SharedDtor();
}

void UpdatePlayerSessionCreationPolicy::SharedDtor() {
  gamesessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newplayersessioncreationpolicy_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UpdatePlayerSessionCreationPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdatePlayerSessionCreationPolicy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdatePlayerSessionCreationPolicy_descriptor_;
}

const UpdatePlayerSessionCreationPolicy& UpdatePlayerSessionCreationPolicy::default_instance() {
  protobuf_InitDefaults_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UpdatePlayerSessionCreationPolicy> UpdatePlayerSessionCreationPolicy_default_instance_;

UpdatePlayerSessionCreationPolicy* UpdatePlayerSessionCreationPolicy::New(::google::protobuf::Arena* arena) const {
  UpdatePlayerSessionCreationPolicy* n = new UpdatePlayerSessionCreationPolicy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdatePlayerSessionCreationPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_gamesessionid()) {
      gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_newplayersessioncreationpolicy()) {
      newplayersessioncreationpolicy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UpdatePlayerSessionCreationPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gameSessionId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamesessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gamesessionid().data(), this->gamesessionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.gameSessionId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_newPlayerSessionCreationPolicy;
        break;
      }

      // optional string newPlayerSessionCreationPolicy = 2;
      case 2: {
        if (tag == 18) {
         parse_newPlayerSessionCreationPolicy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newplayersessioncreationpolicy()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->newplayersessioncreationpolicy().data(), this->newplayersessioncreationpolicy().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.newPlayerSessionCreationPolicy");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  return false;
#undef DO_
}

void UpdatePlayerSessionCreationPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  // optional string gameSessionId = 1;
  if (has_gamesessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamesessionid().data(), this->gamesessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.gameSessionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gamesessionid(), output);
  }

  // optional string newPlayerSessionCreationPolicy = 2;
  if (has_newplayersessioncreationpolicy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newplayersessioncreationpolicy().data(), this->newplayersessioncreationpolicy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.newPlayerSessionCreationPolicy");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->newplayersessioncreationpolicy(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
}

::google::protobuf::uint8* UpdatePlayerSessionCreationPolicy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  // optional string gameSessionId = 1;
  if (has_gamesessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamesessionid().data(), this->gamesessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.gameSessionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gamesessionid(), target);
  }

  // optional string newPlayerSessionCreationPolicy = 2;
  if (has_newplayersessioncreationpolicy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newplayersessioncreationpolicy().data(), this->newplayersessioncreationpolicy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.newPlayerSessionCreationPolicy");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->newplayersessioncreationpolicy(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  return target;
}

size_t UpdatePlayerSessionCreationPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string gameSessionId = 1;
    if (has_gamesessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gamesessionid());
    }

    // optional string newPlayerSessionCreationPolicy = 2;
    if (has_newplayersessioncreationpolicy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newplayersessioncreationpolicy());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdatePlayerSessionCreationPolicy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UpdatePlayerSessionCreationPolicy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdatePlayerSessionCreationPolicy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
    UnsafeMergeFrom(*source);
  }
}

void UpdatePlayerSessionCreationPolicy::MergeFrom(const UpdatePlayerSessionCreationPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UpdatePlayerSessionCreationPolicy::UnsafeMergeFrom(const UpdatePlayerSessionCreationPolicy& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamesessionid()) {
      set_has_gamesessionid();
      gamesessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionid_);
    }
    if (from.has_newplayersessioncreationpolicy()) {
      set_has_newplayersessioncreationpolicy();
      newplayersessioncreationpolicy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.newplayersessioncreationpolicy_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void UpdatePlayerSessionCreationPolicy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePlayerSessionCreationPolicy::CopyFrom(const UpdatePlayerSessionCreationPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UpdatePlayerSessionCreationPolicy::IsInitialized() const {

  return true;
}

void UpdatePlayerSessionCreationPolicy::Swap(UpdatePlayerSessionCreationPolicy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdatePlayerSessionCreationPolicy::InternalSwap(UpdatePlayerSessionCreationPolicy* other) {
  gamesessionid_.Swap(&other->gamesessionid_);
  newplayersessioncreationpolicy_.Swap(&other->newplayersessioncreationpolicy_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdatePlayerSessionCreationPolicy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdatePlayerSessionCreationPolicy_descriptor_;
  metadata.reflection = UpdatePlayerSessionCreationPolicy_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdatePlayerSessionCreationPolicy

// optional string gameSessionId = 1;
bool UpdatePlayerSessionCreationPolicy::has_gamesessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UpdatePlayerSessionCreationPolicy::set_has_gamesessionid() {
  _has_bits_[0] |= 0x00000001u;
}
void UpdatePlayerSessionCreationPolicy::clear_has_gamesessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
void UpdatePlayerSessionCreationPolicy::clear_gamesessionid() {
  gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gamesessionid();
}
const ::std::string& UpdatePlayerSessionCreationPolicy::gamesessionid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.gameSessionId)
  return gamesessionid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdatePlayerSessionCreationPolicy::set_gamesessionid(const ::std::string& value) {
  set_has_gamesessionid();
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.gameSessionId)
}
void UpdatePlayerSessionCreationPolicy::set_gamesessionid(const char* value) {
  set_has_gamesessionid();
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.gameSessionId)
}
void UpdatePlayerSessionCreationPolicy::set_gamesessionid(const char* value, size_t size) {
  set_has_gamesessionid();
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.gameSessionId)
}
::std::string* UpdatePlayerSessionCreationPolicy::mutable_gamesessionid() {
  set_has_gamesessionid();
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.gameSessionId)
  return gamesessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdatePlayerSessionCreationPolicy::release_gamesessionid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.gameSessionId)
  clear_has_gamesessionid();
  return gamesessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdatePlayerSessionCreationPolicy::set_allocated_gamesessionid(::std::string* gamesessionid) {
  if (gamesessionid != NULL) {
    set_has_gamesessionid();
  } else {
    clear_has_gamesessionid();
  }
  gamesessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamesessionid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.gameSessionId)
}

// optional string newPlayerSessionCreationPolicy = 2;
bool UpdatePlayerSessionCreationPolicy::has_newplayersessioncreationpolicy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UpdatePlayerSessionCreationPolicy::set_has_newplayersessioncreationpolicy() {
  _has_bits_[0] |= 0x00000002u;
}
void UpdatePlayerSessionCreationPolicy::clear_has_newplayersessioncreationpolicy() {
  _has_bits_[0] &= ~0x00000002u;
}
void UpdatePlayerSessionCreationPolicy::clear_newplayersessioncreationpolicy() {
  newplayersessioncreationpolicy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_newplayersessioncreationpolicy();
}
const ::std::string& UpdatePlayerSessionCreationPolicy::newplayersessioncreationpolicy() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.newPlayerSessionCreationPolicy)
  return newplayersessioncreationpolicy_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdatePlayerSessionCreationPolicy::set_newplayersessioncreationpolicy(const ::std::string& value) {
  set_has_newplayersessioncreationpolicy();
  newplayersessioncreationpolicy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.newPlayerSessionCreationPolicy)
}
void UpdatePlayerSessionCreationPolicy::set_newplayersessioncreationpolicy(const char* value) {
  set_has_newplayersessioncreationpolicy();
  newplayersessioncreationpolicy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.newPlayerSessionCreationPolicy)
}
void UpdatePlayerSessionCreationPolicy::set_newplayersessioncreationpolicy(const char* value, size_t size) {
  set_has_newplayersessioncreationpolicy();
  newplayersessioncreationpolicy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.newPlayerSessionCreationPolicy)
}
::std::string* UpdatePlayerSessionCreationPolicy::mutable_newplayersessioncreationpolicy() {
  set_has_newplayersessioncreationpolicy();
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.newPlayerSessionCreationPolicy)
  return newplayersessioncreationpolicy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdatePlayerSessionCreationPolicy::release_newplayersessioncreationpolicy() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.newPlayerSessionCreationPolicy)
  clear_has_newplayersessioncreationpolicy();
  return newplayersessioncreationpolicy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdatePlayerSessionCreationPolicy::set_allocated_newplayersessioncreationpolicy(::std::string* newplayersessioncreationpolicy) {
  if (newplayersessioncreationpolicy != NULL) {
    set_has_newplayersessioncreationpolicy();
  } else {
    clear_has_newplayersessioncreationpolicy();
  }
  newplayersessioncreationpolicy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), newplayersessioncreationpolicy);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.newPlayerSessionCreationPolicy)
}

inline const UpdatePlayerSessionCreationPolicy* UpdatePlayerSessionCreationPolicy::internal_default_instance() {
  return &UpdatePlayerSessionCreationPolicy_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcceptPlayerSession::kGameSessionIdFieldNumber;
const int AcceptPlayerSession::kPlayerSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcceptPlayerSession::AcceptPlayerSession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
}

void AcceptPlayerSession::InitAsDefaultInstance() {
}

AcceptPlayerSession::AcceptPlayerSession(const AcceptPlayerSession& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
}

void AcceptPlayerSession::SharedCtor() {
  _cached_size_ = 0;
  gamesessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playersessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AcceptPlayerSession::~AcceptPlayerSession() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  SharedDtor();
}

void AcceptPlayerSession::SharedDtor() {
  gamesessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playersessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AcceptPlayerSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcceptPlayerSession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AcceptPlayerSession_descriptor_;
}

const AcceptPlayerSession& AcceptPlayerSession::default_instance() {
  protobuf_InitDefaults_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AcceptPlayerSession> AcceptPlayerSession_default_instance_;

AcceptPlayerSession* AcceptPlayerSession::New(::google::protobuf::Arena* arena) const {
  AcceptPlayerSession* n = new AcceptPlayerSession;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AcceptPlayerSession::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_gamesessionid()) {
      gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_playersessionid()) {
      playersessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AcceptPlayerSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gameSessionId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamesessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gamesessionid().data(), this->gamesessionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.gameSessionId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_playerSessionId;
        break;
      }

      // optional string playerSessionId = 2;
      case 2: {
        if (tag == 18) {
         parse_playerSessionId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playersessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playersessionid().data(), this->playersessionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.playerSessionId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  return false;
#undef DO_
}

void AcceptPlayerSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  // optional string gameSessionId = 1;
  if (has_gamesessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamesessionid().data(), this->gamesessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.gameSessionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gamesessionid(), output);
  }

  // optional string playerSessionId = 2;
  if (has_playersessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playersessionid().data(), this->playersessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.playerSessionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->playersessionid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
}

::google::protobuf::uint8* AcceptPlayerSession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  // optional string gameSessionId = 1;
  if (has_gamesessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamesessionid().data(), this->gamesessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.gameSessionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gamesessionid(), target);
  }

  // optional string playerSessionId = 2;
  if (has_playersessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playersessionid().data(), this->playersessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.playerSessionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playersessionid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  return target;
}

size_t AcceptPlayerSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string gameSessionId = 1;
    if (has_gamesessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gamesessionid());
    }

    // optional string playerSessionId = 2;
    if (has_playersessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playersessionid());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcceptPlayerSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AcceptPlayerSession* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AcceptPlayerSession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
    UnsafeMergeFrom(*source);
  }
}

void AcceptPlayerSession::MergeFrom(const AcceptPlayerSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AcceptPlayerSession::UnsafeMergeFrom(const AcceptPlayerSession& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamesessionid()) {
      set_has_gamesessionid();
      gamesessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionid_);
    }
    if (from.has_playersessionid()) {
      set_has_playersessionid();
      playersessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playersessionid_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void AcceptPlayerSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptPlayerSession::CopyFrom(const AcceptPlayerSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AcceptPlayerSession::IsInitialized() const {

  return true;
}

void AcceptPlayerSession::Swap(AcceptPlayerSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcceptPlayerSession::InternalSwap(AcceptPlayerSession* other) {
  gamesessionid_.Swap(&other->gamesessionid_);
  playersessionid_.Swap(&other->playersessionid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AcceptPlayerSession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AcceptPlayerSession_descriptor_;
  metadata.reflection = AcceptPlayerSession_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AcceptPlayerSession

// optional string gameSessionId = 1;
bool AcceptPlayerSession::has_gamesessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AcceptPlayerSession::set_has_gamesessionid() {
  _has_bits_[0] |= 0x00000001u;
}
void AcceptPlayerSession::clear_has_gamesessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
void AcceptPlayerSession::clear_gamesessionid() {
  gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gamesessionid();
}
const ::std::string& AcceptPlayerSession::gamesessionid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.gameSessionId)
  return gamesessionid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AcceptPlayerSession::set_gamesessionid(const ::std::string& value) {
  set_has_gamesessionid();
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.gameSessionId)
}
void AcceptPlayerSession::set_gamesessionid(const char* value) {
  set_has_gamesessionid();
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.gameSessionId)
}
void AcceptPlayerSession::set_gamesessionid(const char* value, size_t size) {
  set_has_gamesessionid();
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.gameSessionId)
}
::std::string* AcceptPlayerSession::mutable_gamesessionid() {
  set_has_gamesessionid();
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.gameSessionId)
  return gamesessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AcceptPlayerSession::release_gamesessionid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.gameSessionId)
  clear_has_gamesessionid();
  return gamesessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AcceptPlayerSession::set_allocated_gamesessionid(::std::string* gamesessionid) {
  if (gamesessionid != NULL) {
    set_has_gamesessionid();
  } else {
    clear_has_gamesessionid();
  }
  gamesessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamesessionid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.gameSessionId)
}

// optional string playerSessionId = 2;
bool AcceptPlayerSession::has_playersessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AcceptPlayerSession::set_has_playersessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void AcceptPlayerSession::clear_has_playersessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void AcceptPlayerSession::clear_playersessionid() {
  playersessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playersessionid();
}
const ::std::string& AcceptPlayerSession::playersessionid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.playerSessionId)
  return playersessionid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AcceptPlayerSession::set_playersessionid(const ::std::string& value) {
  set_has_playersessionid();
  playersessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.playerSessionId)
}
void AcceptPlayerSession::set_playersessionid(const char* value) {
  set_has_playersessionid();
  playersessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.playerSessionId)
}
void AcceptPlayerSession::set_playersessionid(const char* value, size_t size) {
  set_has_playersessionid();
  playersessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.playerSessionId)
}
::std::string* AcceptPlayerSession::mutable_playersessionid() {
  set_has_playersessionid();
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.playerSessionId)
  return playersessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AcceptPlayerSession::release_playersessionid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.playerSessionId)
  clear_has_playersessionid();
  return playersessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AcceptPlayerSession::set_allocated_playersessionid(::std::string* playersessionid) {
  if (playersessionid != NULL) {
    set_has_playersessionid();
  } else {
    clear_has_playersessionid();
  }
  playersessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playersessionid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.playerSessionId)
}

inline const AcceptPlayerSession* AcceptPlayerSession::internal_default_instance() {
  return &AcceptPlayerSession_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemovePlayerSession::kGameSessionIdFieldNumber;
const int RemovePlayerSession::kPlayerSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemovePlayerSession::RemovePlayerSession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
}

void RemovePlayerSession::InitAsDefaultInstance() {
}

RemovePlayerSession::RemovePlayerSession(const RemovePlayerSession& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
}

void RemovePlayerSession::SharedCtor() {
  _cached_size_ = 0;
  gamesessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playersessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RemovePlayerSession::~RemovePlayerSession() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  SharedDtor();
}

void RemovePlayerSession::SharedDtor() {
  gamesessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playersessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RemovePlayerSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemovePlayerSession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemovePlayerSession_descriptor_;
}

const RemovePlayerSession& RemovePlayerSession::default_instance() {
  protobuf_InitDefaults_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RemovePlayerSession> RemovePlayerSession_default_instance_;

RemovePlayerSession* RemovePlayerSession::New(::google::protobuf::Arena* arena) const {
  RemovePlayerSession* n = new RemovePlayerSession;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RemovePlayerSession::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_gamesessionid()) {
      gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_playersessionid()) {
      playersessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RemovePlayerSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gameSessionId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamesessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gamesessionid().data(), this->gamesessionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.gameSessionId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_playerSessionId;
        break;
      }

      // optional string playerSessionId = 2;
      case 2: {
        if (tag == 18) {
         parse_playerSessionId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playersessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playersessionid().data(), this->playersessionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.playerSessionId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  return false;
#undef DO_
}

void RemovePlayerSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  // optional string gameSessionId = 1;
  if (has_gamesessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamesessionid().data(), this->gamesessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.gameSessionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gamesessionid(), output);
  }

  // optional string playerSessionId = 2;
  if (has_playersessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playersessionid().data(), this->playersessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.playerSessionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->playersessionid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
}

::google::protobuf::uint8* RemovePlayerSession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  // optional string gameSessionId = 1;
  if (has_gamesessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamesessionid().data(), this->gamesessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.gameSessionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gamesessionid(), target);
  }

  // optional string playerSessionId = 2;
  if (has_playersessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playersessionid().data(), this->playersessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.playerSessionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playersessionid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  return target;
}

size_t RemovePlayerSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string gameSessionId = 1;
    if (has_gamesessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gamesessionid());
    }

    // optional string playerSessionId = 2;
    if (has_playersessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playersessionid());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemovePlayerSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RemovePlayerSession* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RemovePlayerSession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
    UnsafeMergeFrom(*source);
  }
}

void RemovePlayerSession::MergeFrom(const RemovePlayerSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RemovePlayerSession::UnsafeMergeFrom(const RemovePlayerSession& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamesessionid()) {
      set_has_gamesessionid();
      gamesessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionid_);
    }
    if (from.has_playersessionid()) {
      set_has_playersessionid();
      playersessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playersessionid_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void RemovePlayerSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemovePlayerSession::CopyFrom(const RemovePlayerSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RemovePlayerSession::IsInitialized() const {

  return true;
}

void RemovePlayerSession::Swap(RemovePlayerSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemovePlayerSession::InternalSwap(RemovePlayerSession* other) {
  gamesessionid_.Swap(&other->gamesessionid_);
  playersessionid_.Swap(&other->playersessionid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RemovePlayerSession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemovePlayerSession_descriptor_;
  metadata.reflection = RemovePlayerSession_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RemovePlayerSession

// optional string gameSessionId = 1;
bool RemovePlayerSession::has_gamesessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RemovePlayerSession::set_has_gamesessionid() {
  _has_bits_[0] |= 0x00000001u;
}
void RemovePlayerSession::clear_has_gamesessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
void RemovePlayerSession::clear_gamesessionid() {
  gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gamesessionid();
}
const ::std::string& RemovePlayerSession::gamesessionid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.gameSessionId)
  return gamesessionid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RemovePlayerSession::set_gamesessionid(const ::std::string& value) {
  set_has_gamesessionid();
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.gameSessionId)
}
void RemovePlayerSession::set_gamesessionid(const char* value) {
  set_has_gamesessionid();
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.gameSessionId)
}
void RemovePlayerSession::set_gamesessionid(const char* value, size_t size) {
  set_has_gamesessionid();
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.gameSessionId)
}
::std::string* RemovePlayerSession::mutable_gamesessionid() {
  set_has_gamesessionid();
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.gameSessionId)
  return gamesessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RemovePlayerSession::release_gamesessionid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.gameSessionId)
  clear_has_gamesessionid();
  return gamesessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RemovePlayerSession::set_allocated_gamesessionid(::std::string* gamesessionid) {
  if (gamesessionid != NULL) {
    set_has_gamesessionid();
  } else {
    clear_has_gamesessionid();
  }
  gamesessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamesessionid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.gameSessionId)
}

// optional string playerSessionId = 2;
bool RemovePlayerSession::has_playersessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RemovePlayerSession::set_has_playersessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void RemovePlayerSession::clear_has_playersessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void RemovePlayerSession::clear_playersessionid() {
  playersessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playersessionid();
}
const ::std::string& RemovePlayerSession::playersessionid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.playerSessionId)
  return playersessionid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RemovePlayerSession::set_playersessionid(const ::std::string& value) {
  set_has_playersessionid();
  playersessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.playerSessionId)
}
void RemovePlayerSession::set_playersessionid(const char* value) {
  set_has_playersessionid();
  playersessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.playerSessionId)
}
void RemovePlayerSession::set_playersessionid(const char* value, size_t size) {
  set_has_playersessionid();
  playersessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.playerSessionId)
}
::std::string* RemovePlayerSession::mutable_playersessionid() {
  set_has_playersessionid();
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.playerSessionId)
  return playersessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RemovePlayerSession::release_playersessionid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.playerSessionId)
  clear_has_playersessionid();
  return playersessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RemovePlayerSession::set_allocated_playersessionid(::std::string* playersessionid) {
  if (playersessionid != NULL) {
    set_has_playersessionid();
  } else {
    clear_has_playersessionid();
  }
  playersessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playersessionid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.playerSessionId)
}

inline const RemovePlayerSession* RemovePlayerSession::internal_default_instance() {
  return &RemovePlayerSession_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportHealth::kHealthStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportHealth::ReportHealth()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
}

void ReportHealth::InitAsDefaultInstance() {
}

ReportHealth::ReportHealth(const ReportHealth& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
}

void ReportHealth::SharedCtor() {
  _cached_size_ = 0;
  healthstatus_ = false;
}

ReportHealth::~ReportHealth() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  SharedDtor();
}

void ReportHealth::SharedDtor() {
}

void ReportHealth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportHealth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportHealth_descriptor_;
}

const ReportHealth& ReportHealth::default_instance() {
  protobuf_InitDefaults_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReportHealth> ReportHealth_default_instance_;

ReportHealth* ReportHealth::New(::google::protobuf::Arena* arena) const {
  ReportHealth* n = new ReportHealth;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReportHealth::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  healthstatus_ = false;
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReportHealth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool healthStatus = 1;
      case 1: {
        if (tag == 8) {
          set_has_healthstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &healthstatus_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  return false;
#undef DO_
}

void ReportHealth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  // optional bool healthStatus = 1;
  if (has_healthstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->healthstatus(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
}

::google::protobuf::uint8* ReportHealth::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  // optional bool healthStatus = 1;
  if (has_healthstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->healthstatus(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  return target;
}

size_t ReportHealth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  size_t total_size = 0;

  // optional bool healthStatus = 1;
  if (has_healthstatus()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportHealth::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReportHealth* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReportHealth>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
    UnsafeMergeFrom(*source);
  }
}

void ReportHealth::MergeFrom(const ReportHealth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReportHealth::UnsafeMergeFrom(const ReportHealth& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_healthstatus()) {
      set_healthstatus(from.healthstatus());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ReportHealth::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportHealth::CopyFrom(const ReportHealth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReportHealth::IsInitialized() const {

  return true;
}

void ReportHealth::Swap(ReportHealth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportHealth::InternalSwap(ReportHealth* other) {
  std::swap(healthstatus_, other->healthstatus_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReportHealth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportHealth_descriptor_;
  metadata.reflection = ReportHealth_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReportHealth

// optional bool healthStatus = 1;
bool ReportHealth::has_healthstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReportHealth::set_has_healthstatus() {
  _has_bits_[0] |= 0x00000001u;
}
void ReportHealth::clear_has_healthstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReportHealth::clear_healthstatus() {
  healthstatus_ = false;
  clear_has_healthstatus();
}
bool ReportHealth::healthstatus() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth.healthStatus)
  return healthstatus_;
}
void ReportHealth::set_healthstatus(bool value) {
  set_has_healthstatus();
  healthstatus_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth.healthStatus)
}

inline const ReportHealth* ReportHealth::internal_default_instance() {
  return &ReportHealth_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActivateGameSession::kGameSessionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActivateGameSession::ActivateGameSession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
}

void ActivateGameSession::InitAsDefaultInstance() {
  gamesession_ = const_cast< ::com::amazon::whitewater::auxproxy::pbuffer::GameSession*>(
      ::com::amazon::whitewater::auxproxy::pbuffer::GameSession::internal_default_instance());
}

ActivateGameSession::ActivateGameSession(const ActivateGameSession& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
}

void ActivateGameSession::SharedCtor() {
  _cached_size_ = 0;
  gamesession_ = NULL;
}

ActivateGameSession::~ActivateGameSession() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  SharedDtor();
}

void ActivateGameSession::SharedDtor() {
  if (this != &ActivateGameSession_default_instance_.get()) {
    delete gamesession_;
  }
}

void ActivateGameSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivateGameSession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivateGameSession_descriptor_;
}

const ActivateGameSession& ActivateGameSession::default_instance() {
  protobuf_InitDefaults_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ActivateGameSession> ActivateGameSession_default_instance_;

ActivateGameSession* ActivateGameSession::New(::google::protobuf::Arena* arena) const {
  ActivateGameSession* n = new ActivateGameSession;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActivateGameSession::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  if (has_gamesession()) {
    if (gamesession_ != NULL) gamesession_->::com::amazon::whitewater::auxproxy::pbuffer::GameSession::Clear();
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActivateGameSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.amazon.whitewater.auxproxy.pbuffer.GameSession gameSession = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamesession()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  return false;
#undef DO_
}

void ActivateGameSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  // optional .com.amazon.whitewater.auxproxy.pbuffer.GameSession gameSession = 1;
  if (has_gamesession()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->gamesession_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
}

::google::protobuf::uint8* ActivateGameSession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  // optional .com.amazon.whitewater.auxproxy.pbuffer.GameSession gameSession = 1;
  if (has_gamesession()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->gamesession_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  return target;
}

size_t ActivateGameSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  size_t total_size = 0;

  // optional .com.amazon.whitewater.auxproxy.pbuffer.GameSession gameSession = 1;
  if (has_gamesession()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gamesession_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivateGameSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ActivateGameSession* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActivateGameSession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
    UnsafeMergeFrom(*source);
  }
}

void ActivateGameSession::MergeFrom(const ActivateGameSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ActivateGameSession::UnsafeMergeFrom(const ActivateGameSession& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamesession()) {
      mutable_gamesession()->::com::amazon::whitewater::auxproxy::pbuffer::GameSession::MergeFrom(from.gamesession());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ActivateGameSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivateGameSession::CopyFrom(const ActivateGameSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ActivateGameSession::IsInitialized() const {

  return true;
}

void ActivateGameSession::Swap(ActivateGameSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActivateGameSession::InternalSwap(ActivateGameSession* other) {
  std::swap(gamesession_, other->gamesession_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActivateGameSession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivateGameSession_descriptor_;
  metadata.reflection = ActivateGameSession_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActivateGameSession

// optional .com.amazon.whitewater.auxproxy.pbuffer.GameSession gameSession = 1;
bool ActivateGameSession::has_gamesession() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActivateGameSession::set_has_gamesession() {
  _has_bits_[0] |= 0x00000001u;
}
void ActivateGameSession::clear_has_gamesession() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActivateGameSession::clear_gamesession() {
  if (gamesession_ != NULL) gamesession_->::com::amazon::whitewater::auxproxy::pbuffer::GameSession::Clear();
  clear_has_gamesession();
}
const ::com::amazon::whitewater::auxproxy::pbuffer::GameSession& ActivateGameSession::gamesession() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession.gameSession)
  return gamesession_ != NULL ? *gamesession_
                         : *::com::amazon::whitewater::auxproxy::pbuffer::GameSession::internal_default_instance();
}
::com::amazon::whitewater::auxproxy::pbuffer::GameSession* ActivateGameSession::mutable_gamesession() {
  set_has_gamesession();
  if (gamesession_ == NULL) {
    gamesession_ = new ::com::amazon::whitewater::auxproxy::pbuffer::GameSession;
  }
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession.gameSession)
  return gamesession_;
}
::com::amazon::whitewater::auxproxy::pbuffer::GameSession* ActivateGameSession::release_gamesession() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession.gameSession)
  clear_has_gamesession();
  ::com::amazon::whitewater::auxproxy::pbuffer::GameSession* temp = gamesession_;
  gamesession_ = NULL;
  return temp;
}
void ActivateGameSession::set_allocated_gamesession(::com::amazon::whitewater::auxproxy::pbuffer::GameSession* gamesession) {
  delete gamesession_;
  gamesession_ = gamesession;
  if (gamesession) {
    set_has_gamesession();
  } else {
    clear_has_gamesession();
  }
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession.gameSession)
}

inline const ActivateGameSession* ActivateGameSession::internal_default_instance() {
  return &ActivateGameSession_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TerminateProcess::TerminateProcess()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
}

void TerminateProcess::InitAsDefaultInstance() {
}

TerminateProcess::TerminateProcess(const TerminateProcess& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
}

void TerminateProcess::SharedCtor() {
  _cached_size_ = 0;
}

TerminateProcess::~TerminateProcess() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  SharedDtor();
}

void TerminateProcess::SharedDtor() {
}

void TerminateProcess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TerminateProcess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TerminateProcess_descriptor_;
}

const TerminateProcess& TerminateProcess::default_instance() {
  protobuf_InitDefaults_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TerminateProcess> TerminateProcess_default_instance_;

TerminateProcess* TerminateProcess::New(::google::protobuf::Arena* arena) const {
  TerminateProcess* n = new TerminateProcess;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TerminateProcess::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TerminateProcess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  return false;
#undef DO_
}

void TerminateProcess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
}

::google::protobuf::uint8* TerminateProcess::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  return target;
}

size_t TerminateProcess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TerminateProcess::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TerminateProcess* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TerminateProcess>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
    UnsafeMergeFrom(*source);
  }
}

void TerminateProcess::MergeFrom(const TerminateProcess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TerminateProcess::UnsafeMergeFrom(const TerminateProcess& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void TerminateProcess::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TerminateProcess::CopyFrom(const TerminateProcess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TerminateProcess::IsInitialized() const {

  return true;
}

void TerminateProcess::Swap(TerminateProcess* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TerminateProcess::InternalSwap(TerminateProcess* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TerminateProcess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TerminateProcess_descriptor_;
  metadata.reflection = TerminateProcess_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TerminateProcess

inline const TerminateProcess* TerminateProcess::internal_default_instance() {
  return &TerminateProcess_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Response_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_Status_descriptor_;
}
bool Response_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Response_Status Response::OK;
const Response_Status Response::ERROR;
const Response_Status Response::Status_MIN;
const Response_Status Response::Status_MAX;
const int Response::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kStatusFieldNumber;
const int Response::kErrorMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.Response)
}

void Response::InitAsDefaultInstance() {
}

Response::Response(const Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.Response)
}

void Response::SharedCtor() {
  _cached_size_ = 0;
  errormessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  errormessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  protobuf_InitDefaults_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Response> Response_default_instance_;

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.Response)
  if (_has_bits_[0 / 32] & 3u) {
    status_ = 0;
    if (has_errormessage()) {
      errormessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.amazon.whitewater.auxproxy.pbuffer.Response.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::amazon::whitewater::auxproxy::pbuffer::Response_Status_IsValid(value)) {
            set_status(static_cast< ::com::amazon::whitewater::auxproxy::pbuffer::Response_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errorMessage;
        break;
      }

      // optional string errorMessage = 2;
      case 2: {
        if (tag == 18) {
         parse_errorMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errormessage().data(), this->errormessage().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.Response.errorMessage");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.Response)
  // optional .com.amazon.whitewater.auxproxy.pbuffer.Response.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional string errorMessage = 2;
  if (has_errormessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errormessage().data(), this->errormessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.Response.errorMessage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errormessage(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.Response)
}

::google::protobuf::uint8* Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.Response)
  // optional .com.amazon.whitewater.auxproxy.pbuffer.Response.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional string errorMessage = 2;
  if (has_errormessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errormessage().data(), this->errormessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.Response.errorMessage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errormessage(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.Response)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .com.amazon.whitewater.auxproxy.pbuffer.Response.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional string errorMessage = 2;
    if (has_errormessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormessage());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.Response)
    UnsafeMergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.Response)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Response::UnsafeMergeFrom(const Response& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_errormessage()) {
      set_has_errormessage();
      errormessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errormessage_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.Response)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Response::IsInitialized() const {

  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  std::swap(status_, other->status_);
  errormessage_.Swap(&other->errormessage_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// optional .com.amazon.whitewater.auxproxy.pbuffer.Response.Status status = 1;
bool Response::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Response::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
void Response::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void Response::clear_status() {
  status_ = 0;
  clear_has_status();
}
::com::amazon::whitewater::auxproxy::pbuffer::Response_Status Response::status() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.Response.status)
  return static_cast< ::com::amazon::whitewater::auxproxy::pbuffer::Response_Status >(status_);
}
void Response::set_status(::com::amazon::whitewater::auxproxy::pbuffer::Response_Status value) {
  assert(::com::amazon::whitewater::auxproxy::pbuffer::Response_Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.Response.status)
}

// optional string errorMessage = 2;
bool Response::has_errormessage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Response::set_has_errormessage() {
  _has_bits_[0] |= 0x00000002u;
}
void Response::clear_has_errormessage() {
  _has_bits_[0] &= ~0x00000002u;
}
void Response::clear_errormessage() {
  errormessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_errormessage();
}
const ::std::string& Response::errormessage() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.Response.errorMessage)
  return errormessage_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Response::set_errormessage(const ::std::string& value) {
  set_has_errormessage();
  errormessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.Response.errorMessage)
}
void Response::set_errormessage(const char* value) {
  set_has_errormessage();
  errormessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.Response.errorMessage)
}
void Response::set_errormessage(const char* value, size_t size) {
  set_has_errormessage();
  errormessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.Response.errorMessage)
}
::std::string* Response::mutable_errormessage() {
  set_has_errormessage();
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.Response.errorMessage)
  return errormessage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Response::release_errormessage() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.Response.errorMessage)
  clear_has_errormessage();
  return errormessage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Response::set_allocated_errormessage(::std::string* errormessage) {
  if (errormessage != NULL) {
    set_has_errormessage();
  } else {
    clear_has_errormessage();
  }
  errormessage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errormessage);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.Response.errorMessage)
}

inline const Response* Response::internal_default_instance() {
  return &Response_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameSession::kGameSessionIdFieldNumber;
const int GameSession::kFleetIdFieldNumber;
const int GameSession::kNameFieldNumber;
const int GameSession::kMaxPlayersFieldNumber;
const int GameSession::kJoinableFieldNumber;
const int GameSession::kGamePropertiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameSession::GameSession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
}

void GameSession::InitAsDefaultInstance() {
}

GameSession::GameSession(const GameSession& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
}

void GameSession::SharedCtor() {
  _cached_size_ = 0;
  gamesessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fleetid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&maxplayers_, 0, reinterpret_cast<char*>(&joinable_) -
    reinterpret_cast<char*>(&maxplayers_) + sizeof(joinable_));
}

GameSession::~GameSession() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  SharedDtor();
}

void GameSession::SharedDtor() {
  gamesessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fleetid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameSession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameSession_descriptor_;
}

const GameSession& GameSession::default_instance() {
  protobuf_InitDefaults_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GameSession> GameSession_default_instance_;

GameSession* GameSession::New(::google::protobuf::Arena* arena) const {
  GameSession* n = new GameSession;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameSession::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GameSession, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GameSession*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(maxplayers_, joinable_);
    if (has_gamesessionid()) {
      gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_fleetid()) {
      fleetid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  gameproperties_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GameSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gameSessionId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamesessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gamesessionid().data(), this->gamesessionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fleetId;
        break;
      }

      // optional string fleetId = 2;
      case 2: {
        if (tag == 18) {
         parse_fleetId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fleetid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fleetid().data(), this->fleetid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.GameSession.fleetId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.GameSession.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_maxPlayers;
        break;
      }

      // optional int32 maxPlayers = 4;
      case 4: {
        if (tag == 32) {
         parse_maxPlayers:
          set_has_maxplayers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxplayers_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_joinable;
        break;
      }

      // optional bool joinable = 5;
      case 5: {
        if (tag == 40) {
         parse_joinable:
          set_has_joinable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &joinable_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_gameProperties;
        break;
      }

      // repeated .com.amazon.whitewater.auxproxy.pbuffer.GameProperty gameProperties = 6;
      case 6: {
        if (tag == 50) {
         parse_gameProperties:
          DO_(input->IncrementRecursionDepth());
         parse_loop_gameProperties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_gameproperties()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_gameProperties;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  return false;
#undef DO_
}

void GameSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  // optional string gameSessionId = 1;
  if (has_gamesessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamesessionid().data(), this->gamesessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gamesessionid(), output);
  }

  // optional string fleetId = 2;
  if (has_fleetid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fleetid().data(), this->fleetid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSession.fleetId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fleetid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSession.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional int32 maxPlayers = 4;
  if (has_maxplayers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maxplayers(), output);
  }

  // optional bool joinable = 5;
  if (has_joinable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->joinable(), output);
  }

  // repeated .com.amazon.whitewater.auxproxy.pbuffer.GameProperty gameProperties = 6;
  for (unsigned int i = 0, n = this->gameproperties_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->gameproperties(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
}

::google::protobuf::uint8* GameSession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  // optional string gameSessionId = 1;
  if (has_gamesessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamesessionid().data(), this->gamesessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gamesessionid(), target);
  }

  // optional string fleetId = 2;
  if (has_fleetid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fleetid().data(), this->fleetid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSession.fleetId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fleetid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSession.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int32 maxPlayers = 4;
  if (has_maxplayers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->maxplayers(), target);
  }

  // optional bool joinable = 5;
  if (has_joinable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->joinable(), target);
  }

  // repeated .com.amazon.whitewater.auxproxy.pbuffer.GameProperty gameProperties = 6;
  for (unsigned int i = 0, n = this->gameproperties_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->gameproperties(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  return target;
}

size_t GameSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional string gameSessionId = 1;
    if (has_gamesessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gamesessionid());
    }

    // optional string fleetId = 2;
    if (has_fleetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fleetid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 maxPlayers = 4;
    if (has_maxplayers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxplayers());
    }

    // optional bool joinable = 5;
    if (has_joinable()) {
      total_size += 1 + 1;
    }

  }
  // repeated .com.amazon.whitewater.auxproxy.pbuffer.GameProperty gameProperties = 6;
  {
    unsigned int count = this->gameproperties_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameproperties(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GameSession* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameSession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
    UnsafeMergeFrom(*source);
  }
}

void GameSession::MergeFrom(const GameSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GameSession::UnsafeMergeFrom(const GameSession& from) {
  GOOGLE_DCHECK(&from != this);
  gameproperties_.MergeFrom(from.gameproperties_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamesessionid()) {
      set_has_gamesessionid();
      gamesessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionid_);
    }
    if (from.has_fleetid()) {
      set_has_fleetid();
      fleetid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fleetid_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_maxplayers()) {
      set_maxplayers(from.maxplayers());
    }
    if (from.has_joinable()) {
      set_joinable(from.joinable());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void GameSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameSession::CopyFrom(const GameSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GameSession::IsInitialized() const {

  return true;
}

void GameSession::Swap(GameSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameSession::InternalSwap(GameSession* other) {
  gamesessionid_.Swap(&other->gamesessionid_);
  fleetid_.Swap(&other->fleetid_);
  name_.Swap(&other->name_);
  std::swap(maxplayers_, other->maxplayers_);
  std::swap(joinable_, other->joinable_);
  gameproperties_.UnsafeArenaSwap(&other->gameproperties_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameSession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameSession_descriptor_;
  metadata.reflection = GameSession_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameSession

// optional string gameSessionId = 1;
bool GameSession::has_gamesessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameSession::set_has_gamesessionid() {
  _has_bits_[0] |= 0x00000001u;
}
void GameSession::clear_has_gamesessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameSession::clear_gamesessionid() {
  gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gamesessionid();
}
const ::std::string& GameSession::gamesessionid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionId)
  return gamesessionid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameSession::set_gamesessionid(const ::std::string& value) {
  set_has_gamesessionid();
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionId)
}
void GameSession::set_gamesessionid(const char* value) {
  set_has_gamesessionid();
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionId)
}
void GameSession::set_gamesessionid(const char* value, size_t size) {
  set_has_gamesessionid();
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionId)
}
::std::string* GameSession::mutable_gamesessionid() {
  set_has_gamesessionid();
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionId)
  return gamesessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameSession::release_gamesessionid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionId)
  clear_has_gamesessionid();
  return gamesessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameSession::set_allocated_gamesessionid(::std::string* gamesessionid) {
  if (gamesessionid != NULL) {
    set_has_gamesessionid();
  } else {
    clear_has_gamesessionid();
  }
  gamesessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamesessionid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionId)
}

// optional string fleetId = 2;
bool GameSession::has_fleetid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameSession::set_has_fleetid() {
  _has_bits_[0] |= 0x00000002u;
}
void GameSession::clear_has_fleetid() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameSession::clear_fleetid() {
  fleetid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fleetid();
}
const ::std::string& GameSession::fleetid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameSession.fleetId)
  return fleetid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameSession::set_fleetid(const ::std::string& value) {
  set_has_fleetid();
  fleetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameSession.fleetId)
}
void GameSession::set_fleetid(const char* value) {
  set_has_fleetid();
  fleetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.GameSession.fleetId)
}
void GameSession::set_fleetid(const char* value, size_t size) {
  set_has_fleetid();
  fleetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.GameSession.fleetId)
}
::std::string* GameSession::mutable_fleetid() {
  set_has_fleetid();
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GameSession.fleetId)
  return fleetid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameSession::release_fleetid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.GameSession.fleetId)
  clear_has_fleetid();
  return fleetid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameSession::set_allocated_fleetid(::std::string* fleetid) {
  if (fleetid != NULL) {
    set_has_fleetid();
  } else {
    clear_has_fleetid();
  }
  fleetid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fleetid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.GameSession.fleetId)
}

// optional string name = 3;
bool GameSession::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameSession::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
void GameSession::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameSession::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& GameSession::name() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameSession.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameSession::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameSession.name)
}
void GameSession::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.GameSession.name)
}
void GameSession::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.GameSession.name)
}
::std::string* GameSession::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GameSession.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameSession::release_name() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.GameSession.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameSession::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.GameSession.name)
}

// optional int32 maxPlayers = 4;
bool GameSession::has_maxplayers() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GameSession::set_has_maxplayers() {
  _has_bits_[0] |= 0x00000008u;
}
void GameSession::clear_has_maxplayers() {
  _has_bits_[0] &= ~0x00000008u;
}
void GameSession::clear_maxplayers() {
  maxplayers_ = 0;
  clear_has_maxplayers();
}
::google::protobuf::int32 GameSession::maxplayers() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameSession.maxPlayers)
  return maxplayers_;
}
void GameSession::set_maxplayers(::google::protobuf::int32 value) {
  set_has_maxplayers();
  maxplayers_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameSession.maxPlayers)
}

// optional bool joinable = 5;
bool GameSession::has_joinable() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GameSession::set_has_joinable() {
  _has_bits_[0] |= 0x00000010u;
}
void GameSession::clear_has_joinable() {
  _has_bits_[0] &= ~0x00000010u;
}
void GameSession::clear_joinable() {
  joinable_ = false;
  clear_has_joinable();
}
bool GameSession::joinable() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameSession.joinable)
  return joinable_;
}
void GameSession::set_joinable(bool value) {
  set_has_joinable();
  joinable_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameSession.joinable)
}

// repeated .com.amazon.whitewater.auxproxy.pbuffer.GameProperty gameProperties = 6;
int GameSession::gameproperties_size() const {
  return gameproperties_.size();
}
void GameSession::clear_gameproperties() {
  gameproperties_.Clear();
}
const ::com::amazon::whitewater::auxproxy::pbuffer::GameProperty& GameSession::gameproperties(int index) const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameProperties)
  return gameproperties_.Get(index);
}
::com::amazon::whitewater::auxproxy::pbuffer::GameProperty* GameSession::mutable_gameproperties(int index) {
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameProperties)
  return gameproperties_.Mutable(index);
}
::com::amazon::whitewater::auxproxy::pbuffer::GameProperty* GameSession::add_gameproperties() {
  // @@protoc_insertion_point(field_add:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameProperties)
  return gameproperties_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::amazon::whitewater::auxproxy::pbuffer::GameProperty >*
GameSession::mutable_gameproperties() {
  // @@protoc_insertion_point(field_mutable_list:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameProperties)
  return &gameproperties_;
}
const ::google::protobuf::RepeatedPtrField< ::com::amazon::whitewater::auxproxy::pbuffer::GameProperty >&
GameSession::gameproperties() const {
  // @@protoc_insertion_point(field_list:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameProperties)
  return gameproperties_;
}

inline const GameSession* GameSession::internal_default_instance() {
  return &GameSession_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameProperty::kKeyFieldNumber;
const int GameProperty::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameProperty::GameProperty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
}

void GameProperty::InitAsDefaultInstance() {
}

GameProperty::GameProperty(const GameProperty& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
}

void GameProperty::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GameProperty::~GameProperty() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  SharedDtor();
}

void GameProperty::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameProperty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameProperty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameProperty_descriptor_;
}

const GameProperty& GameProperty::default_instance() {
  protobuf_InitDefaults_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GameProperty> GameProperty_default_instance_;

GameProperty* GameProperty::New(::google::protobuf::Arena* arena) const {
  GameProperty* n = new GameProperty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameProperty::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GameProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.GameProperty.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.GameProperty.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  return false;
#undef DO_
}

void GameProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameProperty.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameProperty.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
}

::google::protobuf::uint8* GameProperty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameProperty.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameProperty.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  return target;
}

size_t GameProperty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameProperty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GameProperty* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameProperty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
    UnsafeMergeFrom(*source);
  }
}

void GameProperty::MergeFrom(const GameProperty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GameProperty::UnsafeMergeFrom(const GameProperty& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void GameProperty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameProperty::CopyFrom(const GameProperty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GameProperty::IsInitialized() const {

  return true;
}

void GameProperty::Swap(GameProperty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameProperty::InternalSwap(GameProperty* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameProperty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameProperty_descriptor_;
  metadata.reflection = GameProperty_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameProperty

// optional string key = 1;
bool GameProperty::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameProperty::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void GameProperty::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameProperty::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& GameProperty::key() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameProperty::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.key)
}
void GameProperty::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.key)
}
void GameProperty::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.key)
}
::std::string* GameProperty::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameProperty::release_key() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameProperty::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.key)
}

// optional string value = 2;
bool GameProperty::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameProperty::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void GameProperty::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameProperty::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& GameProperty::value() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameProperty::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.value)
}
void GameProperty::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.value)
}
void GameProperty::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.value)
}
::std::string* GameProperty::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameProperty::release_value() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameProperty::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.value)
}

inline const GameProperty* GameProperty::internal_default_instance() {
  return &GameProperty_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerSession::kPlayerSessionIdFieldNumber;
const int PlayerSession::kPlayerIdFieldNumber;
const int PlayerSession::kGameSessionIdFieldNumber;
const int PlayerSession::kFleetIdFieldNumber;
const int PlayerSession::kIpAddressFieldNumber;
const int PlayerSession::kStatusFieldNumber;
const int PlayerSession::kCreationTimeFieldNumber;
const int PlayerSession::kTerminationTimeFieldNumber;
const int PlayerSession::kPortFieldNumber;
const int PlayerSession::kPlayerDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerSession::PlayerSession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
}

void PlayerSession::InitAsDefaultInstance() {
}

PlayerSession::PlayerSession(const PlayerSession& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
}

void PlayerSession::SharedCtor() {
  _cached_size_ = 0;
  playersessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamesessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fleetid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&creationtime_, 0, reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&creationtime_) + sizeof(port_));
}

PlayerSession::~PlayerSession() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  SharedDtor();
}

void PlayerSession::SharedDtor() {
  playersessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamesessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fleetid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipaddress_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlayerSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerSession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerSession_descriptor_;
}

const PlayerSession& PlayerSession::default_instance() {
  protobuf_InitDefaults_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PlayerSession> PlayerSession_default_instance_;

PlayerSession* PlayerSession::New(::google::protobuf::Arena* arena) const {
  PlayerSession* n = new PlayerSession;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerSession::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PlayerSession, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlayerSession*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(creationtime_, terminationtime_);
    if (has_playersessionid()) {
      playersessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_playerid()) {
      playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_gamesessionid()) {
      gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_fleetid()) {
      fleetid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_ipaddress()) {
      ipaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_status()) {
      status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 768u) {
    port_ = 0;
    if (has_playerdata()) {
      playerdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PlayerSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string playerSessionId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playersessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playersessionid().data(), this->playersessionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerSessionId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_playerId;
        break;
      }

      // optional string playerId = 2;
      case 2: {
        if (tag == 18) {
         parse_playerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_gameSessionId;
        break;
      }

      // optional string gameSessionId = 3;
      case 3: {
        if (tag == 26) {
         parse_gameSessionId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamesessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gamesessionid().data(), this->gamesessionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.gameSessionId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_fleetId;
        break;
      }

      // optional string fleetId = 4;
      case 4: {
        if (tag == 34) {
         parse_fleetId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fleetid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fleetid().data(), this->fleetid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.fleetId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ipAddress;
        break;
      }

      // optional string ipAddress = 5;
      case 5: {
        if (tag == 42) {
         parse_ipAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ipaddress().data(), this->ipaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.ipAddress");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_status;
        break;
      }

      // optional string status = 6;
      case 6: {
        if (tag == 50) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.status");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_creationTime;
        break;
      }

      // optional int64 creationTime = 7;
      case 7: {
        if (tag == 56) {
         parse_creationTime:
          set_has_creationtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &creationtime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_terminationTime;
        break;
      }

      // optional int64 terminationTime = 8;
      case 8: {
        if (tag == 64) {
         parse_terminationTime:
          set_has_terminationtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &terminationtime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_port;
        break;
      }

      // optional int32 port = 9;
      case 9: {
        if (tag == 72) {
         parse_port:
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_playerData;
        break;
      }

      // optional string playerData = 10;
      case 10: {
        if (tag == 82) {
         parse_playerData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playerdata().data(), this->playerdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerData");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  return false;
#undef DO_
}

void PlayerSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  // optional string playerSessionId = 1;
  if (has_playersessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playersessionid().data(), this->playersessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerSessionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->playersessionid(), output);
  }

  // optional string playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->playerid(), output);
  }

  // optional string gameSessionId = 3;
  if (has_gamesessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamesessionid().data(), this->gamesessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.gameSessionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->gamesessionid(), output);
  }

  // optional string fleetId = 4;
  if (has_fleetid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fleetid().data(), this->fleetid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.fleetId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->fleetid(), output);
  }

  // optional string ipAddress = 5;
  if (has_ipaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipaddress().data(), this->ipaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.ipAddress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->ipaddress(), output);
  }

  // optional string status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->status(), output);
  }

  // optional int64 creationTime = 7;
  if (has_creationtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->creationtime(), output);
  }

  // optional int64 terminationTime = 8;
  if (has_terminationtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->terminationtime(), output);
  }

  // optional int32 port = 9;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->port(), output);
  }

  // optional string playerData = 10;
  if (has_playerdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerdata().data(), this->playerdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerData");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->playerdata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
}

::google::protobuf::uint8* PlayerSession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  // optional string playerSessionId = 1;
  if (has_playersessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playersessionid().data(), this->playersessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerSessionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playersessionid(), target);
  }

  // optional string playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playerid(), target);
  }

  // optional string gameSessionId = 3;
  if (has_gamesessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamesessionid().data(), this->gamesessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.gameSessionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gamesessionid(), target);
  }

  // optional string fleetId = 4;
  if (has_fleetid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fleetid().data(), this->fleetid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.fleetId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->fleetid(), target);
  }

  // optional string ipAddress = 5;
  if (has_ipaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipaddress().data(), this->ipaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.ipAddress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ipaddress(), target);
  }

  // optional string status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->status(), target);
  }

  // optional int64 creationTime = 7;
  if (has_creationtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->creationtime(), target);
  }

  // optional int64 terminationTime = 8;
  if (has_terminationtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->terminationtime(), target);
  }

  // optional int32 port = 9;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->port(), target);
  }

  // optional string playerData = 10;
  if (has_playerdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerdata().data(), this->playerdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerData");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->playerdata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  return target;
}

size_t PlayerSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string playerSessionId = 1;
    if (has_playersessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playersessionid());
    }

    // optional string playerId = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional string gameSessionId = 3;
    if (has_gamesessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gamesessionid());
    }

    // optional string fleetId = 4;
    if (has_fleetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fleetid());
    }

    // optional string ipAddress = 5;
    if (has_ipaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ipaddress());
    }

    // optional string status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status());
    }

    // optional int64 creationTime = 7;
    if (has_creationtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->creationtime());
    }

    // optional int64 terminationTime = 8;
    if (has_terminationtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->terminationtime());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional int32 port = 9;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional string playerData = 10;
    if (has_playerdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerdata());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PlayerSession* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerSession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
    UnsafeMergeFrom(*source);
  }
}

void PlayerSession::MergeFrom(const PlayerSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PlayerSession::UnsafeMergeFrom(const PlayerSession& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playersessionid()) {
      set_has_playersessionid();
      playersessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playersessionid_);
    }
    if (from.has_playerid()) {
      set_has_playerid();
      playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
    }
    if (from.has_gamesessionid()) {
      set_has_gamesessionid();
      gamesessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionid_);
    }
    if (from.has_fleetid()) {
      set_has_fleetid();
      fleetid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fleetid_);
    }
    if (from.has_ipaddress()) {
      set_has_ipaddress();
      ipaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipaddress_);
    }
    if (from.has_status()) {
      set_has_status();
      status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
    }
    if (from.has_creationtime()) {
      set_creationtime(from.creationtime());
    }
    if (from.has_terminationtime()) {
      set_terminationtime(from.terminationtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_playerdata()) {
      set_has_playerdata();
      playerdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerdata_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void PlayerSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSession::CopyFrom(const PlayerSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PlayerSession::IsInitialized() const {

  return true;
}

void PlayerSession::Swap(PlayerSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerSession::InternalSwap(PlayerSession* other) {
  playersessionid_.Swap(&other->playersessionid_);
  playerid_.Swap(&other->playerid_);
  gamesessionid_.Swap(&other->gamesessionid_);
  fleetid_.Swap(&other->fleetid_);
  ipaddress_.Swap(&other->ipaddress_);
  status_.Swap(&other->status_);
  std::swap(creationtime_, other->creationtime_);
  std::swap(terminationtime_, other->terminationtime_);
  std::swap(port_, other->port_);
  playerdata_.Swap(&other->playerdata_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerSession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerSession_descriptor_;
  metadata.reflection = PlayerSession_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerSession

// optional string playerSessionId = 1;
bool PlayerSession::has_playersessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlayerSession::set_has_playersessionid() {
  _has_bits_[0] |= 0x00000001u;
}
void PlayerSession::clear_has_playersessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlayerSession::clear_playersessionid() {
  playersessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playersessionid();
}
const ::std::string& PlayerSession::playersessionid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerSessionId)
  return playersessionid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerSession::set_playersessionid(const ::std::string& value) {
  set_has_playersessionid();
  playersessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerSessionId)
}
void PlayerSession::set_playersessionid(const char* value) {
  set_has_playersessionid();
  playersessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerSessionId)
}
void PlayerSession::set_playersessionid(const char* value, size_t size) {
  set_has_playersessionid();
  playersessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerSessionId)
}
::std::string* PlayerSession::mutable_playersessionid() {
  set_has_playersessionid();
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerSessionId)
  return playersessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerSession::release_playersessionid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerSessionId)
  clear_has_playersessionid();
  return playersessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerSession::set_allocated_playersessionid(::std::string* playersessionid) {
  if (playersessionid != NULL) {
    set_has_playersessionid();
  } else {
    clear_has_playersessionid();
  }
  playersessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playersessionid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerSessionId)
}

// optional string playerId = 2;
bool PlayerSession::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlayerSession::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
void PlayerSession::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlayerSession::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playerid();
}
const ::std::string& PlayerSession::playerid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerId)
  return playerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerSession::set_playerid(const ::std::string& value) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerId)
}
void PlayerSession::set_playerid(const char* value) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerId)
}
void PlayerSession::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerId)
}
::std::string* PlayerSession::mutable_playerid() {
  set_has_playerid();
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerId)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerSession::release_playerid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerId)
  clear_has_playerid();
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerSession::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    set_has_playerid();
  } else {
    clear_has_playerid();
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerId)
}

// optional string gameSessionId = 3;
bool PlayerSession::has_gamesessionid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlayerSession::set_has_gamesessionid() {
  _has_bits_[0] |= 0x00000004u;
}
void PlayerSession::clear_has_gamesessionid() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlayerSession::clear_gamesessionid() {
  gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gamesessionid();
}
const ::std::string& PlayerSession::gamesessionid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.gameSessionId)
  return gamesessionid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerSession::set_gamesessionid(const ::std::string& value) {
  set_has_gamesessionid();
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.gameSessionId)
}
void PlayerSession::set_gamesessionid(const char* value) {
  set_has_gamesessionid();
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.gameSessionId)
}
void PlayerSession::set_gamesessionid(const char* value, size_t size) {
  set_has_gamesessionid();
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.gameSessionId)
}
::std::string* PlayerSession::mutable_gamesessionid() {
  set_has_gamesessionid();
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.gameSessionId)
  return gamesessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerSession::release_gamesessionid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.gameSessionId)
  clear_has_gamesessionid();
  return gamesessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerSession::set_allocated_gamesessionid(::std::string* gamesessionid) {
  if (gamesessionid != NULL) {
    set_has_gamesessionid();
  } else {
    clear_has_gamesessionid();
  }
  gamesessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamesessionid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.gameSessionId)
}

// optional string fleetId = 4;
bool PlayerSession::has_fleetid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PlayerSession::set_has_fleetid() {
  _has_bits_[0] |= 0x00000008u;
}
void PlayerSession::clear_has_fleetid() {
  _has_bits_[0] &= ~0x00000008u;
}
void PlayerSession::clear_fleetid() {
  fleetid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fleetid();
}
const ::std::string& PlayerSession::fleetid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.fleetId)
  return fleetid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerSession::set_fleetid(const ::std::string& value) {
  set_has_fleetid();
  fleetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.fleetId)
}
void PlayerSession::set_fleetid(const char* value) {
  set_has_fleetid();
  fleetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.fleetId)
}
void PlayerSession::set_fleetid(const char* value, size_t size) {
  set_has_fleetid();
  fleetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.fleetId)
}
::std::string* PlayerSession::mutable_fleetid() {
  set_has_fleetid();
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.fleetId)
  return fleetid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerSession::release_fleetid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.fleetId)
  clear_has_fleetid();
  return fleetid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerSession::set_allocated_fleetid(::std::string* fleetid) {
  if (fleetid != NULL) {
    set_has_fleetid();
  } else {
    clear_has_fleetid();
  }
  fleetid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fleetid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.fleetId)
}

// optional string ipAddress = 5;
bool PlayerSession::has_ipaddress() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PlayerSession::set_has_ipaddress() {
  _has_bits_[0] |= 0x00000010u;
}
void PlayerSession::clear_has_ipaddress() {
  _has_bits_[0] &= ~0x00000010u;
}
void PlayerSession::clear_ipaddress() {
  ipaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ipaddress();
}
const ::std::string& PlayerSession::ipaddress() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.ipAddress)
  return ipaddress_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerSession::set_ipaddress(const ::std::string& value) {
  set_has_ipaddress();
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.ipAddress)
}
void PlayerSession::set_ipaddress(const char* value) {
  set_has_ipaddress();
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.ipAddress)
}
void PlayerSession::set_ipaddress(const char* value, size_t size) {
  set_has_ipaddress();
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.ipAddress)
}
::std::string* PlayerSession::mutable_ipaddress() {
  set_has_ipaddress();
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.ipAddress)
  return ipaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerSession::release_ipaddress() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.ipAddress)
  clear_has_ipaddress();
  return ipaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerSession::set_allocated_ipaddress(::std::string* ipaddress) {
  if (ipaddress != NULL) {
    set_has_ipaddress();
  } else {
    clear_has_ipaddress();
  }
  ipaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipaddress);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.ipAddress)
}

// optional string status = 6;
bool PlayerSession::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PlayerSession::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
void PlayerSession::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
void PlayerSession::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_status();
}
const ::std::string& PlayerSession::status() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.status)
  return status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerSession::set_status(const ::std::string& value) {
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.status)
}
void PlayerSession::set_status(const char* value) {
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.status)
}
void PlayerSession::set_status(const char* value, size_t size) {
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.status)
}
::std::string* PlayerSession::mutable_status() {
  set_has_status();
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerSession::release_status() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.status)
  clear_has_status();
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerSession::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    set_has_status();
  } else {
    clear_has_status();
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.status)
}

// optional int64 creationTime = 7;
bool PlayerSession::has_creationtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PlayerSession::set_has_creationtime() {
  _has_bits_[0] |= 0x00000040u;
}
void PlayerSession::clear_has_creationtime() {
  _has_bits_[0] &= ~0x00000040u;
}
void PlayerSession::clear_creationtime() {
  creationtime_ = GOOGLE_LONGLONG(0);
  clear_has_creationtime();
}
::google::protobuf::int64 PlayerSession::creationtime() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.creationTime)
  return creationtime_;
}
void PlayerSession::set_creationtime(::google::protobuf::int64 value) {
  set_has_creationtime();
  creationtime_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.creationTime)
}

// optional int64 terminationTime = 8;
bool PlayerSession::has_terminationtime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PlayerSession::set_has_terminationtime() {
  _has_bits_[0] |= 0x00000080u;
}
void PlayerSession::clear_has_terminationtime() {
  _has_bits_[0] &= ~0x00000080u;
}
void PlayerSession::clear_terminationtime() {
  terminationtime_ = GOOGLE_LONGLONG(0);
  clear_has_terminationtime();
}
::google::protobuf::int64 PlayerSession::terminationtime() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.terminationTime)
  return terminationtime_;
}
void PlayerSession::set_terminationtime(::google::protobuf::int64 value) {
  set_has_terminationtime();
  terminationtime_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.terminationTime)
}

// optional int32 port = 9;
bool PlayerSession::has_port() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PlayerSession::set_has_port() {
  _has_bits_[0] |= 0x00000100u;
}
void PlayerSession::clear_has_port() {
  _has_bits_[0] &= ~0x00000100u;
}
void PlayerSession::clear_port() {
  port_ = 0;
  clear_has_port();
}
::google::protobuf::int32 PlayerSession::port() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.port)
  return port_;
}
void PlayerSession::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.port)
}

// optional string playerData = 10;
bool PlayerSession::has_playerdata() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PlayerSession::set_has_playerdata() {
  _has_bits_[0] |= 0x00000200u;
}
void PlayerSession::clear_has_playerdata() {
  _has_bits_[0] &= ~0x00000200u;
}
void PlayerSession::clear_playerdata() {
  playerdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playerdata();
}
const ::std::string& PlayerSession::playerdata() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerData)
  return playerdata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerSession::set_playerdata(const ::std::string& value) {
  set_has_playerdata();
  playerdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerData)
}
void PlayerSession::set_playerdata(const char* value) {
  set_has_playerdata();
  playerdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerData)
}
void PlayerSession::set_playerdata(const char* value, size_t size) {
  set_has_playerdata();
  playerdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerData)
}
::std::string* PlayerSession::mutable_playerdata() {
  set_has_playerdata();
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerData)
  return playerdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerSession::release_playerdata() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerData)
  clear_has_playerdata();
  return playerdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerSession::set_allocated_playerdata(::std::string* playerdata) {
  if (playerdata != NULL) {
    set_has_playerdata();
  } else {
    clear_has_playerdata();
  }
  playerdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerdata);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerData)
}

inline const PlayerSession* PlayerSession::internal_default_instance() {
  return &PlayerSession_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DescribePlayerSessionsRequest::kGameSessionIdFieldNumber;
const int DescribePlayerSessionsRequest::kPlayerIdFieldNumber;
const int DescribePlayerSessionsRequest::kPlayerSessionIdFieldNumber;
const int DescribePlayerSessionsRequest::kPlayerSessionStatusFilterFieldNumber;
const int DescribePlayerSessionsRequest::kNextTokenFieldNumber;
const int DescribePlayerSessionsRequest::kLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DescribePlayerSessionsRequest::DescribePlayerSessionsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
}

void DescribePlayerSessionsRequest::InitAsDefaultInstance() {
}

DescribePlayerSessionsRequest::DescribePlayerSessionsRequest(const DescribePlayerSessionsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
}

void DescribePlayerSessionsRequest::SharedCtor() {
  _cached_size_ = 0;
  gamesessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playersessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playersessionstatusfilter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nexttoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = 0;
}

DescribePlayerSessionsRequest::~DescribePlayerSessionsRequest() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  SharedDtor();
}

void DescribePlayerSessionsRequest::SharedDtor() {
  gamesessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playersessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playersessionstatusfilter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nexttoken_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DescribePlayerSessionsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DescribePlayerSessionsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DescribePlayerSessionsRequest_descriptor_;
}

const DescribePlayerSessionsRequest& DescribePlayerSessionsRequest::default_instance() {
  protobuf_InitDefaults_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DescribePlayerSessionsRequest> DescribePlayerSessionsRequest_default_instance_;

DescribePlayerSessionsRequest* DescribePlayerSessionsRequest::New(::google::protobuf::Arena* arena) const {
  DescribePlayerSessionsRequest* n = new DescribePlayerSessionsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DescribePlayerSessionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_gamesessionid()) {
      gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_playerid()) {
      playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_playersessionid()) {
      playersessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_playersessionstatusfilter()) {
      playersessionstatusfilter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_nexttoken()) {
      nexttoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    limit_ = 0;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DescribePlayerSessionsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gameSessionId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamesessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gamesessionid().data(), this->gamesessionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.gameSessionId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_playerId;
        break;
      }

      // optional string playerId = 2;
      case 2: {
        if (tag == 18) {
         parse_playerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_playerSessionId;
        break;
      }

      // optional string playerSessionId = 3;
      case 3: {
        if (tag == 26) {
         parse_playerSessionId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playersessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playersessionid().data(), this->playersessionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_playerSessionStatusFilter;
        break;
      }

      // optional string playerSessionStatusFilter = 4;
      case 4: {
        if (tag == 34) {
         parse_playerSessionStatusFilter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playersessionstatusfilter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playersessionstatusfilter().data(), this->playersessionstatusfilter().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionStatusFilter");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_nextToken;
        break;
      }

      // optional string nextToken = 5;
      case 5: {
        if (tag == 42) {
         parse_nextToken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nexttoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nexttoken().data(), this->nexttoken().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.nextToken");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_limit;
        break;
      }

      // optional int32 limit = 6;
      case 6: {
        if (tag == 48) {
         parse_limit:
          set_has_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  return false;
#undef DO_
}

void DescribePlayerSessionsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  // optional string gameSessionId = 1;
  if (has_gamesessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamesessionid().data(), this->gamesessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.gameSessionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gamesessionid(), output);
  }

  // optional string playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->playerid(), output);
  }

  // optional string playerSessionId = 3;
  if (has_playersessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playersessionid().data(), this->playersessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->playersessionid(), output);
  }

  // optional string playerSessionStatusFilter = 4;
  if (has_playersessionstatusfilter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playersessionstatusfilter().data(), this->playersessionstatusfilter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionStatusFilter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->playersessionstatusfilter(), output);
  }

  // optional string nextToken = 5;
  if (has_nexttoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nexttoken().data(), this->nexttoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.nextToken");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->nexttoken(), output);
  }

  // optional int32 limit = 6;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
}

::google::protobuf::uint8* DescribePlayerSessionsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  // optional string gameSessionId = 1;
  if (has_gamesessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamesessionid().data(), this->gamesessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.gameSessionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gamesessionid(), target);
  }

  // optional string playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playerid(), target);
  }

  // optional string playerSessionId = 3;
  if (has_playersessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playersessionid().data(), this->playersessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->playersessionid(), target);
  }

  // optional string playerSessionStatusFilter = 4;
  if (has_playersessionstatusfilter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playersessionstatusfilter().data(), this->playersessionstatusfilter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionStatusFilter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->playersessionstatusfilter(), target);
  }

  // optional string nextToken = 5;
  if (has_nexttoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nexttoken().data(), this->nexttoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.nextToken");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->nexttoken(), target);
  }

  // optional int32 limit = 6;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  return target;
}

size_t DescribePlayerSessionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional string gameSessionId = 1;
    if (has_gamesessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gamesessionid());
    }

    // optional string playerId = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional string playerSessionId = 3;
    if (has_playersessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playersessionid());
    }

    // optional string playerSessionStatusFilter = 4;
    if (has_playersessionstatusfilter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playersessionstatusfilter());
    }

    // optional string nextToken = 5;
    if (has_nexttoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nexttoken());
    }

    // optional int32 limit = 6;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DescribePlayerSessionsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DescribePlayerSessionsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DescribePlayerSessionsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
    UnsafeMergeFrom(*source);
  }
}

void DescribePlayerSessionsRequest::MergeFrom(const DescribePlayerSessionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DescribePlayerSessionsRequest::UnsafeMergeFrom(const DescribePlayerSessionsRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamesessionid()) {
      set_has_gamesessionid();
      gamesessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionid_);
    }
    if (from.has_playerid()) {
      set_has_playerid();
      playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
    }
    if (from.has_playersessionid()) {
      set_has_playersessionid();
      playersessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playersessionid_);
    }
    if (from.has_playersessionstatusfilter()) {
      set_has_playersessionstatusfilter();
      playersessionstatusfilter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playersessionstatusfilter_);
    }
    if (from.has_nexttoken()) {
      set_has_nexttoken();
      nexttoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nexttoken_);
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void DescribePlayerSessionsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DescribePlayerSessionsRequest::CopyFrom(const DescribePlayerSessionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DescribePlayerSessionsRequest::IsInitialized() const {

  return true;
}

void DescribePlayerSessionsRequest::Swap(DescribePlayerSessionsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DescribePlayerSessionsRequest::InternalSwap(DescribePlayerSessionsRequest* other) {
  gamesessionid_.Swap(&other->gamesessionid_);
  playerid_.Swap(&other->playerid_);
  playersessionid_.Swap(&other->playersessionid_);
  playersessionstatusfilter_.Swap(&other->playersessionstatusfilter_);
  nexttoken_.Swap(&other->nexttoken_);
  std::swap(limit_, other->limit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DescribePlayerSessionsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DescribePlayerSessionsRequest_descriptor_;
  metadata.reflection = DescribePlayerSessionsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DescribePlayerSessionsRequest

// optional string gameSessionId = 1;
bool DescribePlayerSessionsRequest::has_gamesessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DescribePlayerSessionsRequest::set_has_gamesessionid() {
  _has_bits_[0] |= 0x00000001u;
}
void DescribePlayerSessionsRequest::clear_has_gamesessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
void DescribePlayerSessionsRequest::clear_gamesessionid() {
  gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gamesessionid();
}
const ::std::string& DescribePlayerSessionsRequest::gamesessionid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.gameSessionId)
  return gamesessionid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DescribePlayerSessionsRequest::set_gamesessionid(const ::std::string& value) {
  set_has_gamesessionid();
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.gameSessionId)
}
void DescribePlayerSessionsRequest::set_gamesessionid(const char* value) {
  set_has_gamesessionid();
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.gameSessionId)
}
void DescribePlayerSessionsRequest::set_gamesessionid(const char* value, size_t size) {
  set_has_gamesessionid();
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.gameSessionId)
}
::std::string* DescribePlayerSessionsRequest::mutable_gamesessionid() {
  set_has_gamesessionid();
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.gameSessionId)
  return gamesessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DescribePlayerSessionsRequest::release_gamesessionid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.gameSessionId)
  clear_has_gamesessionid();
  return gamesessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DescribePlayerSessionsRequest::set_allocated_gamesessionid(::std::string* gamesessionid) {
  if (gamesessionid != NULL) {
    set_has_gamesessionid();
  } else {
    clear_has_gamesessionid();
  }
  gamesessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamesessionid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.gameSessionId)
}

// optional string playerId = 2;
bool DescribePlayerSessionsRequest::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DescribePlayerSessionsRequest::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
void DescribePlayerSessionsRequest::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
void DescribePlayerSessionsRequest::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playerid();
}
const ::std::string& DescribePlayerSessionsRequest::playerid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerId)
  return playerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DescribePlayerSessionsRequest::set_playerid(const ::std::string& value) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerId)
}
void DescribePlayerSessionsRequest::set_playerid(const char* value) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerId)
}
void DescribePlayerSessionsRequest::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerId)
}
::std::string* DescribePlayerSessionsRequest::mutable_playerid() {
  set_has_playerid();
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerId)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DescribePlayerSessionsRequest::release_playerid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerId)
  clear_has_playerid();
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DescribePlayerSessionsRequest::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    set_has_playerid();
  } else {
    clear_has_playerid();
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerId)
}

// optional string playerSessionId = 3;
bool DescribePlayerSessionsRequest::has_playersessionid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DescribePlayerSessionsRequest::set_has_playersessionid() {
  _has_bits_[0] |= 0x00000004u;
}
void DescribePlayerSessionsRequest::clear_has_playersessionid() {
  _has_bits_[0] &= ~0x00000004u;
}
void DescribePlayerSessionsRequest::clear_playersessionid() {
  playersessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playersessionid();
}
const ::std::string& DescribePlayerSessionsRequest::playersessionid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionId)
  return playersessionid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DescribePlayerSessionsRequest::set_playersessionid(const ::std::string& value) {
  set_has_playersessionid();
  playersessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionId)
}
void DescribePlayerSessionsRequest::set_playersessionid(const char* value) {
  set_has_playersessionid();
  playersessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionId)
}
void DescribePlayerSessionsRequest::set_playersessionid(const char* value, size_t size) {
  set_has_playersessionid();
  playersessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionId)
}
::std::string* DescribePlayerSessionsRequest::mutable_playersessionid() {
  set_has_playersessionid();
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionId)
  return playersessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DescribePlayerSessionsRequest::release_playersessionid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionId)
  clear_has_playersessionid();
  return playersessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DescribePlayerSessionsRequest::set_allocated_playersessionid(::std::string* playersessionid) {
  if (playersessionid != NULL) {
    set_has_playersessionid();
  } else {
    clear_has_playersessionid();
  }
  playersessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playersessionid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionId)
}

// optional string playerSessionStatusFilter = 4;
bool DescribePlayerSessionsRequest::has_playersessionstatusfilter() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DescribePlayerSessionsRequest::set_has_playersessionstatusfilter() {
  _has_bits_[0] |= 0x00000008u;
}
void DescribePlayerSessionsRequest::clear_has_playersessionstatusfilter() {
  _has_bits_[0] &= ~0x00000008u;
}
void DescribePlayerSessionsRequest::clear_playersessionstatusfilter() {
  playersessionstatusfilter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playersessionstatusfilter();
}
const ::std::string& DescribePlayerSessionsRequest::playersessionstatusfilter() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionStatusFilter)
  return playersessionstatusfilter_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DescribePlayerSessionsRequest::set_playersessionstatusfilter(const ::std::string& value) {
  set_has_playersessionstatusfilter();
  playersessionstatusfilter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionStatusFilter)
}
void DescribePlayerSessionsRequest::set_playersessionstatusfilter(const char* value) {
  set_has_playersessionstatusfilter();
  playersessionstatusfilter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionStatusFilter)
}
void DescribePlayerSessionsRequest::set_playersessionstatusfilter(const char* value, size_t size) {
  set_has_playersessionstatusfilter();
  playersessionstatusfilter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionStatusFilter)
}
::std::string* DescribePlayerSessionsRequest::mutable_playersessionstatusfilter() {
  set_has_playersessionstatusfilter();
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionStatusFilter)
  return playersessionstatusfilter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DescribePlayerSessionsRequest::release_playersessionstatusfilter() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionStatusFilter)
  clear_has_playersessionstatusfilter();
  return playersessionstatusfilter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DescribePlayerSessionsRequest::set_allocated_playersessionstatusfilter(::std::string* playersessionstatusfilter) {
  if (playersessionstatusfilter != NULL) {
    set_has_playersessionstatusfilter();
  } else {
    clear_has_playersessionstatusfilter();
  }
  playersessionstatusfilter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playersessionstatusfilter);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionStatusFilter)
}

// optional string nextToken = 5;
bool DescribePlayerSessionsRequest::has_nexttoken() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DescribePlayerSessionsRequest::set_has_nexttoken() {
  _has_bits_[0] |= 0x00000010u;
}
void DescribePlayerSessionsRequest::clear_has_nexttoken() {
  _has_bits_[0] &= ~0x00000010u;
}
void DescribePlayerSessionsRequest::clear_nexttoken() {
  nexttoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nexttoken();
}
const ::std::string& DescribePlayerSessionsRequest::nexttoken() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.nextToken)
  return nexttoken_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DescribePlayerSessionsRequest::set_nexttoken(const ::std::string& value) {
  set_has_nexttoken();
  nexttoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.nextToken)
}
void DescribePlayerSessionsRequest::set_nexttoken(const char* value) {
  set_has_nexttoken();
  nexttoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.nextToken)
}
void DescribePlayerSessionsRequest::set_nexttoken(const char* value, size_t size) {
  set_has_nexttoken();
  nexttoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.nextToken)
}
::std::string* DescribePlayerSessionsRequest::mutable_nexttoken() {
  set_has_nexttoken();
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.nextToken)
  return nexttoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DescribePlayerSessionsRequest::release_nexttoken() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.nextToken)
  clear_has_nexttoken();
  return nexttoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DescribePlayerSessionsRequest::set_allocated_nexttoken(::std::string* nexttoken) {
  if (nexttoken != NULL) {
    set_has_nexttoken();
  } else {
    clear_has_nexttoken();
  }
  nexttoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nexttoken);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.nextToken)
}

// optional int32 limit = 6;
bool DescribePlayerSessionsRequest::has_limit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DescribePlayerSessionsRequest::set_has_limit() {
  _has_bits_[0] |= 0x00000020u;
}
void DescribePlayerSessionsRequest::clear_has_limit() {
  _has_bits_[0] &= ~0x00000020u;
}
void DescribePlayerSessionsRequest::clear_limit() {
  limit_ = 0;
  clear_has_limit();
}
::google::protobuf::int32 DescribePlayerSessionsRequest::limit() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.limit)
  return limit_;
}
void DescribePlayerSessionsRequest::set_limit(::google::protobuf::int32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.limit)
}

inline const DescribePlayerSessionsRequest* DescribePlayerSessionsRequest::internal_default_instance() {
  return &DescribePlayerSessionsRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DescribePlayerSessionsResponse::kNextTokenFieldNumber;
const int DescribePlayerSessionsResponse::kPlayerSessionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DescribePlayerSessionsResponse::DescribePlayerSessionsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
}

void DescribePlayerSessionsResponse::InitAsDefaultInstance() {
}

DescribePlayerSessionsResponse::DescribePlayerSessionsResponse(const DescribePlayerSessionsResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
}

void DescribePlayerSessionsResponse::SharedCtor() {
  _cached_size_ = 0;
  nexttoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DescribePlayerSessionsResponse::~DescribePlayerSessionsResponse() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  SharedDtor();
}

void DescribePlayerSessionsResponse::SharedDtor() {
  nexttoken_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DescribePlayerSessionsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DescribePlayerSessionsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DescribePlayerSessionsResponse_descriptor_;
}

const DescribePlayerSessionsResponse& DescribePlayerSessionsResponse::default_instance() {
  protobuf_InitDefaults_aws_2fgamelift_2fserver_2fprotocols_2fsdk_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DescribePlayerSessionsResponse> DescribePlayerSessionsResponse_default_instance_;

DescribePlayerSessionsResponse* DescribePlayerSessionsResponse::New(::google::protobuf::Arena* arena) const {
  DescribePlayerSessionsResponse* n = new DescribePlayerSessionsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DescribePlayerSessionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  if (has_nexttoken()) {
    nexttoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  playersessions_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DescribePlayerSessionsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string nextToken = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nexttoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nexttoken().data(), this->nexttoken().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.nextToken");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_playerSessions;
        break;
      }

      // repeated .com.amazon.whitewater.auxproxy.pbuffer.PlayerSession playerSessions = 2;
      case 2: {
        if (tag == 18) {
         parse_playerSessions:
          DO_(input->IncrementRecursionDepth());
         parse_loop_playerSessions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_playersessions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_playerSessions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  return false;
#undef DO_
}

void DescribePlayerSessionsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  // optional string nextToken = 1;
  if (has_nexttoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nexttoken().data(), this->nexttoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.nextToken");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->nexttoken(), output);
  }

  // repeated .com.amazon.whitewater.auxproxy.pbuffer.PlayerSession playerSessions = 2;
  for (unsigned int i = 0, n = this->playersessions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->playersessions(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
}

::google::protobuf::uint8* DescribePlayerSessionsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  // optional string nextToken = 1;
  if (has_nexttoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nexttoken().data(), this->nexttoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.nextToken");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nexttoken(), target);
  }

  // repeated .com.amazon.whitewater.auxproxy.pbuffer.PlayerSession playerSessions = 2;
  for (unsigned int i = 0, n = this->playersessions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->playersessions(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  return target;
}

size_t DescribePlayerSessionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  size_t total_size = 0;

  // optional string nextToken = 1;
  if (has_nexttoken()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nexttoken());
  }

  // repeated .com.amazon.whitewater.auxproxy.pbuffer.PlayerSession playerSessions = 2;
  {
    unsigned int count = this->playersessions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playersessions(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DescribePlayerSessionsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DescribePlayerSessionsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DescribePlayerSessionsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
    UnsafeMergeFrom(*source);
  }
}

void DescribePlayerSessionsResponse::MergeFrom(const DescribePlayerSessionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DescribePlayerSessionsResponse::UnsafeMergeFrom(const DescribePlayerSessionsResponse& from) {
  GOOGLE_DCHECK(&from != this);
  playersessions_.MergeFrom(from.playersessions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nexttoken()) {
      set_has_nexttoken();
      nexttoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nexttoken_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void DescribePlayerSessionsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DescribePlayerSessionsResponse::CopyFrom(const DescribePlayerSessionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DescribePlayerSessionsResponse::IsInitialized() const {

  return true;
}

void DescribePlayerSessionsResponse::Swap(DescribePlayerSessionsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DescribePlayerSessionsResponse::InternalSwap(DescribePlayerSessionsResponse* other) {
  nexttoken_.Swap(&other->nexttoken_);
  playersessions_.UnsafeArenaSwap(&other->playersessions_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DescribePlayerSessionsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DescribePlayerSessionsResponse_descriptor_;
  metadata.reflection = DescribePlayerSessionsResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DescribePlayerSessionsResponse

// optional string nextToken = 1;
bool DescribePlayerSessionsResponse::has_nexttoken() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DescribePlayerSessionsResponse::set_has_nexttoken() {
  _has_bits_[0] |= 0x00000001u;
}
void DescribePlayerSessionsResponse::clear_has_nexttoken() {
  _has_bits_[0] &= ~0x00000001u;
}
void DescribePlayerSessionsResponse::clear_nexttoken() {
  nexttoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nexttoken();
}
const ::std::string& DescribePlayerSessionsResponse::nexttoken() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.nextToken)
  return nexttoken_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DescribePlayerSessionsResponse::set_nexttoken(const ::std::string& value) {
  set_has_nexttoken();
  nexttoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.nextToken)
}
void DescribePlayerSessionsResponse::set_nexttoken(const char* value) {
  set_has_nexttoken();
  nexttoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.nextToken)
}
void DescribePlayerSessionsResponse::set_nexttoken(const char* value, size_t size) {
  set_has_nexttoken();
  nexttoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.nextToken)
}
::std::string* DescribePlayerSessionsResponse::mutable_nexttoken() {
  set_has_nexttoken();
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.nextToken)
  return nexttoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DescribePlayerSessionsResponse::release_nexttoken() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.nextToken)
  clear_has_nexttoken();
  return nexttoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DescribePlayerSessionsResponse::set_allocated_nexttoken(::std::string* nexttoken) {
  if (nexttoken != NULL) {
    set_has_nexttoken();
  } else {
    clear_has_nexttoken();
  }
  nexttoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nexttoken);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.nextToken)
}

// repeated .com.amazon.whitewater.auxproxy.pbuffer.PlayerSession playerSessions = 2;
int DescribePlayerSessionsResponse::playersessions_size() const {
  return playersessions_.size();
}
void DescribePlayerSessionsResponse::clear_playersessions() {
  playersessions_.Clear();
}
const ::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession& DescribePlayerSessionsResponse::playersessions(int index) const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.playerSessions)
  return playersessions_.Get(index);
}
::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession* DescribePlayerSessionsResponse::mutable_playersessions(int index) {
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.playerSessions)
  return playersessions_.Mutable(index);
}
::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession* DescribePlayerSessionsResponse::add_playersessions() {
  // @@protoc_insertion_point(field_add:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.playerSessions)
  return playersessions_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession >*
DescribePlayerSessionsResponse::mutable_playersessions() {
  // @@protoc_insertion_point(field_mutable_list:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.playerSessions)
  return &playersessions_;
}
const ::google::protobuf::RepeatedPtrField< ::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession >&
DescribePlayerSessionsResponse::playersessions() const {
  // @@protoc_insertion_point(field_list:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.playerSessions)
  return playersessions_;
}

inline const DescribePlayerSessionsResponse* DescribePlayerSessionsResponse::internal_default_instance() {
  return &DescribePlayerSessionsResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pbuffer
}  // namespace auxproxy
}  // namespace whitewater
}  // namespace amazon
}  // namespace com

// @@protoc_insertion_point(global_scope)
